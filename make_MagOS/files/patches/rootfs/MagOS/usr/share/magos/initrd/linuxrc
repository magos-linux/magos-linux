#!/bin/ash
# Initial script for Linux Live operating system
# Author: Tomas M <http://www.linux-live.org/>
#
# Author: Mikhail Zaripov <http://magos-linux.ru>
# Author: Anton Goroshkin <http://magos-linux.ru>

export PATH=.:/:/usr/sbin:/usr/bin:/sbin:/bin

mount -n -t proc proc /proc 2>/dev/null
ln -sf /proc/mounts /etc/mtab    # this allows us to use umount -a
mount -n -t sysfs sysfs /sys
mount -n -o remount,rw /         # for the case we forgot rw boot option

. liblinuxlive # it requires proc to be mounted

header "starting Linux Live scripts <http://www.linux-live.org/>"

# Don't print kernel messages to konsole now.
# Syslog will reset printk settings, no need to remember it here anymore.
echo "0" >/proc/sys/kernel/printk

modprobe_module loop
modprobe_module squashfs
modprobe_module squashfs-lzma

# /usr and some drivers are compressed in initrd 
# so it must be mounted from .lzm files
mount_initrd_loops

# Load essential drivers, like CDROM drivers, aufs/squashfs etc,
# use mdev to create /dev/ devices and setup it as a hotplug-handler
modprobe_essential_modules

# start hotplugging before hw drivers load
mdev_start_hotplug

# Then load drivers for data storage and input devices
modprobe_usb_modules
modprobe_pcmcia_modules

debug_shell

# start quickshell
if [ "$(cmdline_parameter quickshell)$(cmdline_parameter qs)" ] ; then
   loadfont < /usr/lib/kbd/UniCyr_8x14.psf
   loadkeys /usr/lib/kbd/ru.map
   getty -n -l /bin/autologin 9600 tty2 linux &
   getty -n -l /bin/autologin 9600 tty3 linux &
   getty -n -l /bin/autologin 9600 tty4 linux &
   getty -n -l /bin/autologin 9600 tty5 linux &
   getty -n -l /bin/autologin 9600 tty6 linux &
   automount
   clear
   cat ./quickshell.hlp
   /bin/bash autologin
   cd /
   umount /mnt/*
   export LANG=""
   echo "continue...."
fi

# Resume from swsuspend
if [ -z $(cmdline_parameter noresume) ] ; then
   RESUME_DEV=$(blkid | grep -im1 type=.swsuspend | awk -F: '{print $1}')
   [ -z "$RESUME_DEV" ] || resume -r $RESUME_DEV
   # if resume didnt work we have to mkswap or system will fail to emergencity mode
   [ -z "$RESUME_DEV" ] || mkswap -L MagOS_swap $RESUME_DEV
fi

# make sure ext3 partitions are not mounted using ext2 driver,
# and vfat partitions are not mounted using msdos driver
echo -e "ext4\next3\next2\nvfat\n*" >/etc/filesystems

mkdir -p $UNION $MEMORY

MUID=$(cmdline_value users | awk -F: '{print $2}')
[ "$MUID" = "" ] || sed -i s/:500:500:/:$MUID:$MUID:/g /etc/passwd
[ "$MUID" = "" ] || sed -i s/:500:/:$MUID:/g /etc/group

debug_shell

# Find livecd data directory by searching for livecd.sgn file
SGN=$(cmdline_value sgnfile)
if [ "$SGN" = "" ]; then SGN=$LIVECDNAME.sgn; fi
echolog "looking for '$LIVECDNAME' data directory (searching for $SGN file)"

# First, try from= boot argument, if given
DATAFROM=$(cmdline_value from)

# If ip= parameter is present, assume we're booted over PXE
# In that case, we have to initialize network very soon (now)
# ip=<client-ip>:<boot-server-ip>:<gw-ip>:<netmask>
# Nevertheless, from= parameter won't be overwritten by this
#IP=$(cmdline_value ip)

if [ "$DATAFROM" ]; then
   DATA=$MOUNTDIR/$LIVEMEDIA
   if [ "$(echo $DATAFROM | grep "://")" != ""  ]; then
      init_dhcp $(modprobe_network_modules)
      debug_shell
      echo $DATAFROM | grep -iq ^"http://" && DATAFROM=$(mount_httpfs $DATAFROM $MOUNTDIR/$LIVEMEDIA)
      echo $DATAFROM | grep -iq ^"ftp://" && DATAFROM=$(mount_curlftpfs $DATAFROM $MOUNTDIR/$LIVEMEDIA)
      echo $DATAFROM | grep -iq ^"ssh://" && DATAFROM=$(mount_sshfs $DATAFROM $MOUNTDIR/$LIVEMEDIA)
      echo $DATAFROM | grep -iq ^"nfs://" && DATAFROM=$(mount_nfs $DATAFROM $MOUNTDIR/$LIVEMEDIA)
   else
      DATAFROM=$(find_in_computer $DATAFROM $MOUNTDIR/$LIVEMEDIA)
      [ -b "$DATAFROM" ] && mount_device $DATAFROM $MOUNTDIR/$LIVEMEDIA  # mount block device
   fi
   [ -d "$DATAFROM" ] && DATA="$DATAFROM"
   [ -f "$DATAFROM" ] && DATA=$LOOPMOUNT && mount_device $DATAFROM $LOOPMOUNT  # mount again, it may be loop device
   [ -d "$DATA/$LIVECDNAME" ] && DATA="$DATA/$LIVECDNAME"
   [ -f "$DATA/$SGN" ] || DATA=""
   grep -q "`head -1 /VERSION`" $DATA/[Vv][Ee][Rr][Ss][Ii][Oo][Nn] 2>/dev/null || DATA=""
fi


if [ "$DATA" = "" ]; then
   # from= is not used or it didn't contain valid data
   DATA=$(find_in_computer $LIVECDNAME/$SGN $MOUNTDIR/$LIVEMEDIA)
   DATA=$(dirname $DATA 2>/dev/null)
fi

if [ "$DATA" = "" ]; then fatal \
"$LIVECDNAME data not found.
You are maybe using an unsupported boot device (eg. SCSI or old PCMCIA).
Workaround: Copy the directory $LIVECDNAME from your boot device to an IDE/SATA
disk, eg. to /mnt/hda1/$LIVECDNAME or C:\\$LIVECDNAME. Then try to boot again."
fi
echolog "using $LIVECDNAME data from $DATA"

debug_shell

echo scantimeout=0 >/tmp/cmdline
SGN=$(cmdline_value sgndatafile)
if [ "$SGN" != "no" -a "$SGN" != "off" ] ;then
   [ -z "$SGN" ] && SGN=$LIVECDNAME-Data.sgn
   echo $SGN | grep -q / || SGN=${LIVECDNAME}-Data/$SGN
   echolog "looking for '$LIVECDNAME-Data' directory (searching for $SGN file)"
   DATAMNT=$(find_in_computer $SGN $MOUNTDIR/$LIVEDATA)
   DATAMNT=$(dirname $DATAMNT 2>/dev/null)
   [ -z "$DATAMNT" ] || echolog "using $LIVECDNAME data from $DATAMNT"
fi

debug_shell

INIFILE=$(cmdline_value config)
[ -z "$INIFILE" ] && INIFILE=$LIVECDNAME.ini
[ -f "$DATA/$INIFILE" ] && PATHINI="$DATA/$INIFILE"
[ -f "$DATAMNT/$INIFILE" ] && PATHINI="$DATAMNT/$INIFILE"
[ -z "$PATHINI" ] || echolog "using $PATHINI config file"
[ -z "$PATHINI" ] && PATHINI=/dev/null
egrep -v '^#|^$' "$PATHINI" | sed s-\\\\r-- | gzip > /tmp/$LIVECDNAME.ini.gz
grep '^CMDLINE=' "$PATHINI" | sed s/^CMDLINE=// | tr -d [:cntrl:]\'\" >/tmp/cmdline
chmod 400 /tmp/$LIVECDNAME.ini.gz /tmp/cmdline 2>/dev/null

debug_shell

echolog "setting up directory for changes"
CHANGESVAL=$(cmdline_value changes)

if [ "$CHANGESVAL" -a "$CHANGESVAL" != "xzm" ]; then
   if [ "$(echo $CHANGESVAL | grep "://")" != ""  ]; then
      init_dhcp $(modprobe_network_modules)
      echo $CHANGESVAL | grep -iq ^"nfs://" && CHANGESMNT=$(mount_nfs $CHANGESVAL $MOUNTDIR/$LIVECHANGES)
   else
      [ -r "$DATAMNT/$CHANGESVAL" ] && CHANGESMNT="$DATAMNT/$CHANGESVAL"
      [ -z "$CHANGESMNT" ] &&  CHANGESMNT=$(find_in_computer $CHANGESVAL $MOUNTDIR/$LIVECHANGES)
   fi
   if [ -r "$CHANGESMNT" ] ;then
      [ -b "$CHANGESMNT" ] && mount_device $CHANGESMNT $MEMORY # mount block device
      [ -f "$CHANGESMNT" ] && mount_device $CHANGESMNT $MEMORY # mount again, it may be loop device
      [ -d "$CHANGESMNT" ] && mount -o rbind $CHANGESMNT $MEMORY # mount dir
      echolog $CHANGESMNT
   else
      rmdir $MEMORY
   fi
else
   rmdir $MEMORY
fi

debug_shell

echolog "setting up modules repository"
REPOSITORY=$(cmdline_value repository)

if [ "$REPOSITORY" ]; then
   if [ "$(echo $REPOSITORY | grep "://")" != ""  ]; then
      init_dhcp $(modprobe_network_modules)
       mkdir -p $LIVEREPOSITORY
      echo $REPOSITORY | grep -iq ^"http://" && mount_httpfs $REPOSITORY $LIVEREPOSITORY
      echo $REPOSITORY | grep -iq ^"ftp://" && mount_curlftpfs $REPOSITORY $LIVEREPOSITORY
      echo $REPOSITORY | grep -iq ^"ssh://" && mount_sshfs $REPOSITORY $LIVEREPOSITORY
      echo $REPOSITORY | grep -iq ^"nfs://" && mount_nfs $REPOSITORY $LIVEREPOSITORY
   else
   REPOSITORYMNT=$(find_in_computer $REPOSITORY $LIVEREPOSITORY)
   mount_device $REPOSITORYMNT $LIVEREPOSITORY
   echolog $REPOSITORYMNT
   fi
else
   REPOSITORYMNT=$DATAMNT
   LIVEREPOSITORY=$DATAMNT
fi

debug_shell

# test if the filesystem is writable so changes can be stored to it
touch $MEMORY/empty 2>/dev/null && \
rm -f $MEMORY/empty 2>/dev/null

# if changes can't be mounted or the filesystem is not writable,
# fallback to the default: tmpfs
if [ $? -ne 0 ]; then
   echolog "changes not used or not writable, using memory only"
   fumount $MEMORY
   mkdir -p $MEMORY # mount_device might removed it

   RAMSIZE=$(cmdline_value ramsize)
   if [ "$RAMSIZE" = "" ]; then RAMSIZE="60%"; fi
   mount -t tmpfs -o "size=$RAMSIZE" tmpfs $MEMORY
   XINO=$MEMORY
else
   # So it is writable, we will keep the filesystem mounted.
   # Check if it supports links and chmod.
   # If not, overmount CHANGES using posixovl
   echolog "testing the filesystem for posix compatibility"
   touch $MEMORY/.empty1 && \
   ln -sf $MEMORY/.empty1 $MEMORY/.empty2 2>/dev/null && \
   chmod +x $MEMORY/.empty1 2>/dev/null  && \
   test -x $MEMORY/.empty1 && \
   chmod -x $MEMORY/.empty1 2>/dev/null  && \
   test ! -x $MEMORY/.empty1 && \
   rm $MEMORY/.empty1 $MEMORY/.empty2 2>/dev/null

   if [ $? -ne 0 ]; then
      echolog "not compatible - starting posixovl"
      rm $MEMORY/.empty1 $MEMORY/.empty2 2>/dev/null
      mkdir -p $CHANGES
      posixovl -F $CHANGES -- -o attr_timeout=300,entry_timeout=300,negative_timeout=300,kernel_cache,allow_other
      find $CHANGES >/dev/null 2>&1 # cache everything now
   fi
fi

mkdir -p $CHANGES $IMAGES

#In case we using lzm|xzm as changes= parameter
if echo "$CHANGESVAL" | grep -q [XxLl][Zz][Mm]$ ;then
   if [ "$CHANGESVAL" = "xzm" ] ;then
      MUID=mac-$(cat /sys/class/net/eth0/address | tr -d :)
      [ "$MUID" = "mac-" ] && MUID=vga-$(lspci -mmn | grep -i 0300 | md5sum | cut -c 1-12)
      [ -d "$DATAMNT/machines" ] && CHANGESMNT=$DATAMNT/machines
      [ -z "$CHANGESMNT" ] && CHANGESMNT=$DATA/machines
      if [ -f "$CHANGESMNT/static/$MUID.xzm"  ] ;then 
         CHANGESMNT=$CHANGESMNT/static/$MUID.xzm
      else
         CHANGESMNT=$CHANGESMNT/dynamic/$MUID.xzm
      fi
   fi
   if [ -f "$CHANGESMNT" ] ;then
      echolog "unpacking $CHANGESMNT to memory"
      unsquashfs -f -dest $CHANGES "$CHANGESMNT" >/dev/null 2>&1
   fi
   echo "$CHANGESMNT" | sed s=/machines/static/=/machines/dynamic/= > $CHANGES/.savetomodule
fi

echolog "setting up modules local repository"
LOCAL_REP=$(cmdline_value local_rep)

if [ "$LOCAL_REP" ]; then
      mkdir -p $COPY2REP
      LOCAL_REPMNT=$(find_in_computer $LOCAL_REP $COPY2REP)
      [ -f "$LOCAL_REPMNT" ] && mount_device $LOCAL_REPMNT $COPY2REP  # mount again, it may be loop device
      [ -b "$LOCAL_REPMNT" ] && mount_device $LOCAL_REPMNT $COPY2REP  # mount block device
      [ -d "$LOCAL_REPMNT" ] && mount -o rbind $LOCAL_REPMNT $COPY2REP # mount dir
      echolog $LOCAL_REPMNT
else
      if [ -z "$DATAMNT" ] ;then
         COPY2REP=$MEMORY/modules
      else
         COPY2REP=$DATAMNT
      fi
fi

debug_shell

DATAINSMOD=$DATA
# If toram or copy2ram boot parameter is present, copy all fs modules to RAM.
# (skip modules from /optional/ which are not listed in load= boot option)
# Finaly modify DATA variable so it will point to correct directory
if [ "$(cmdline_parameter toram)$(cmdline_parameter copy2ram)$(cmdline_value toram)$(cmdline_value copy2ram)" != "" ]; then
   echolog "copying $LIVECDNAME data to RAM, this may take some time..."
   mkdir -p $COPY2RAM
   # make sure it's in RAM even with changes= parameter
   if [ "$CHANGESMNT" ]; then mount -t tmpfs -o "size=$RAMSIZE" tmpfs $COPY2RAM; fi
   copy_to_ram $DATA $COPY2RAM
   copy_to_ram $LIVEREPOSITORY $COPY2RAM
   DATAINSMOD=$COPY2RAM
fi
debug_shell

if [ "$(cmdline_parameter copy2rep)$(cmdline_value copy2rep)" != "" ]; then
   echolog "copying $LIVECDNAME data to LOCAL_REP, this may take some time..."
   mkdir -p $COPY2REP
   copy_to_rep $DATA $COPY2REP
   copy_to_rep $LIVEREPOSITORY $COPY2REP
   DATAINSMOD=$COPY2REP
fi

debug_shell

echo "MAGOSMODS=/$DATA" > /etc/modules
[ "$LIVEREPOSITORY" != "" -a "$LIVEREPOSITORY" != "/" ] && echo "MAGOSDATAMODS=/$LIVEREPOSITORY" | sed s-//-/- >> /etc/modules
[ "$DATAINSMOD" != "" ] && echo "CACHE=/$DATAINSMOD" | sed s-=/memory-=/mnt/live/memory- >> /etc/modules
# mount aufs using the writable branch as the first one (leftmost/topmost)
if [ $(cmdline_parameter unionfs) ];then
    echolog "setup union directory (using unionfs)"
    INSMODORDER="$LIVEREPOSITORY $MEMORY $DATA $DATAINSMOD"
    mount -t unionfs -o dirs=$CHANGES=rw unionfs $UNION
else
    echolog "setup union directory (using aufs)"
    # store the xino file in memory in all cases, it's faster and safer
    if [ "$XINO" != "$MEMORY" ]; then
       mkdir -p $XINO
       mount -n -t tmpfs tmpfs $XINO
    fi
    INSMODORDER="$DATAINSMOD $DATA $MEMORY $LIVEREPOSITORY"
    mount -t aufs -o nowarn_perm,xino=$XINO/.aufs.xino,br:$CHANGES=rw aufs $UNION
fi
if [ $? -ne 0 ]; then dmesg | tail -n 1; fatal "can't setup union (aufs)"; fi

debug_shell

# DATA contains path to the base directory of all fs modules which need
# to be mounted and inserted into live filesystem. Do it now.
# the $MEMORY directory can contain $MEMORY/modules too
# in the case if changes= boot argument is used. If not, it doesn't hurt
# the $LIVEREPOSITORY directory can contain $LIVEREPOSITORY/modules too
echolog "inserting all modules and creating live filesystem"
for a in $INSMODORDER ;do
    union_insert_modules $UNION $a $IMAGES
done

debug_shell

echolog "copying content of rootcopy directory"
cp -af $DATA/rootcopy/* $UNION 2>/dev/null # may be empty
[ -z "$DATAMNT" ] || cp -a $DATAMNT/rootcopy/* "$UNION" 2>/dev/null  # may be empty
#cp /$DATA/initrd.gz $UNION/boot
#cp /$DATA/vmlinuz   $UNION/boot

# find and mount /home
echolog "setting up /home directory"
HOME=$(cmdline_value home)

if [ "$HOME" ]; then
   if [ "$(echo $HOME | grep "://")" != ""  ]; then
      init_dhcp $(modprobe_network_modules)
      echo $HOME | grep -iq ^"nfs://" && HOMEMNT=$(mount_nfs $HOME $MOUNTDIR/$LIVEHOME)
   else
      [ -w "$DATAMNT/$HOME" ] && HOMEMNT=$DATAMNT/$HOME
      [ -w "$DATA/$HOME" ] && HOMEMNT=$DATA/$HOME
      [ -z "$HOMEMNT" ] && HOMEMNT=$(find_in_computer $HOME $MOUNTDIR/$LIVEHOME)
      [ -b "$HOMEMNT" ] && mount_device $HOMEMNT $UNION/home # mount block device
   fi
   [ -f "$HOMEMNT" ] && mount_device $HOMEMNT $UNION/home # mount again, it may be loop device
   [ -d "$HOMEMNT" ] && mount -o rbind $HOMEMNT $UNION/home # mount dir
   echolog $HOMEMNT
fi
[ -d $UNION/home ] || mkdir $UNION/home

debug_shell

# freeing unused media
if [ "$(cmdline_parameter freemedia)" ] ;then
  cd_autoeject 1
  for a in "/$MOUNTDIR/$LIVEMEDIA" "/$LOOPMOUNT" "/$LIVEREPOSITORY" "/$MOUNTDIR/$LIVEDATA" ;do
     grep -q " $a " /proc/mounts || continue
     [ -z "$(losetupfunc | grep -m 1 $a/)$(grep -m 1 ^$a/ /proc/mounts)" ] && fumount $a
  done
  cd_autoeject 0
fi

echolog "recreating /etc/fstab and /mnt directories"
touch $UNION/etc/fstab
rmdir $UNION/mnt/* 2>/dev/null
fstab_update $UNION
cd $UNION
[ -x "etc/rc.d/rc.preinit" ] && /bin/bash etc/rc.d/rc.preinit
cd /

# everything is ready now, so we may unload unused kernel modules
# and do some cleanup, unmount few things which are no longer needed.
rmmod_unused_modules
fumount /usr
fumount /sys

# More likely these directories aren't there.
# Even if they are, this won't hurt.
mkdir -p $UNION/boot $UNION/proc $UNION/sys $UNION/dev $UNION/tmp $UNION/media
chmod 1777 $UNION/tmp

# Reattach media to new root
for a in "/$MOUNTDIR/$LIVEMEDIA" "/$LOOPMOUNT" "/$LIVEREPOSITORY" "/$MOUNTDIR/$LIVECHANGES" "/$MOUNTDIR/$LIVEHOME" "/$MOUNTDIR/$LIVEDATA" ;do
   [ "$a" = "/" -o "$a" = "//" ] && continue
   grep -q " $a " /proc/mounts || continue
   mkdir -p $UNION$a
   mount --move $a $UNION$a
done

# Boot will contain whatever was in ./boot directory in the bootable media
# Error output goes to null, as nothing is mounted with copy2ram
#mount -n -o rbind $(dirname $DATA)/boot $UNION/boot 2>/dev/null

debug_shell

# Union contains all the files and directories unioned from all modules.
# Change root directory to it, and move initrd's root to /mnt/live/initramdisk
# Finaly execute /sbin/init to start the distribution.
echolog "changing root directory..."

cd $UNION
mkdir -p $INITRAMDISK

# make sure some devices are there
if [ ! -e dev/console ]; then mknod dev/console c 5 1; fi
if [ ! -e dev/null ]; then mknod dev/null c 1 3; fi

# If a boot parameter nohotplug is used, copy all dev files (found by mdev)
# to the unioned dev directory, your Linux may need them since most likely
# udev will not be started in that case
if [ "$(cmdline_parameter nohotplug)" != "" ]; then
   cp -fdR /dev . 2>/dev/null
fi

# find chroot and init
if [ -x bin/chroot ]; then  CHROOT=bin/chroot; fi
if [ -x sbin/chroot ]; then  CHROOT=sbin/chroot; fi
if [ -x usr/bin/chroot ]; then  CHROOT=usr/bin/chroot; fi
if [ -x usr/sbin/chroot ]; then CHROOT=usr/sbin/chroot; fi
if [ "$CHROOT" = "" ]; then fatal "Can't find executable chroot command"; fi

if [ -x bin/init ]; then INIT=bin/init; fi
if [ -x sbin/init ]; then INIT=sbin/init; fi
if [ "$INIT" = "" ]; then fatal "Can't find executable init command"; fi

# time to end Linux Live scripts and start the distribution itself,
# using /sbin/init or whatever was found.
header "linux live end, starting $LIVECDNAME"

debug_shell

[ $(cmdline_parameter unionfs) ] && fs_type=unionfs || fs_type=aufs
fumount /lib/modules/*/kernel >/dev/null 2>/dev/null
umount /proc 2>/dev/null
rm -f /drivers.lzm /usr.lzm /drivers.xzm /usr.xzm >/dev/null 2>/dev/null
#mount -n -o remount,ro $fs_type .

# We will copy init from the distro to initrd (there should be 2MB free)
# This allows us to use the cleanup script during reboot, as init will be
# started from memory and not from the union and /union will not be busy.

cp -aHf $INIT /bin
if [ $? -eq 0 ]; then
   pivot_root . $INITRAMDISK
   exec $CHROOT . $INITRAMDISK/bin/init <dev/console >dev/console 2>&1
else # If copying fails, start init directly.
   pivot_root . $INITRAMDISK
   exec $CHROOT . $INIT <dev/console >dev/console 2>&1
fi

header "!!ERROR!!"
fatal "You are not supposed to be here, something went wrong!"
#!/bin/ash
export PATH=.:/:/usr/sbin:/usr/bin:/sbin:/bin
mount -n -t proc proc /proc 2>/dev/null
ln -sf /proc/mounts /etc/mtab    # this allows us to use umount -a
mount -n -t sysfs sysfs /sys
mount -n -o remount,rw /         # for the case we forgot rw boot option
. liblinuxlive # it requires proc to be mounted

header "starting quickshell"
echo "0" >/proc/sys/kernel/printk

modprobe_module loop
modprobe_module squashfs-lzma
mount_initrd_loops
modprobe_essential_modules
mdev_start_hotplug
modprobe_usb_modules
modprobe_pcmcia_modules
for a in /dev/sda* ;do
   mount_device   /mnt/ rw
done
/bin/ash --login
