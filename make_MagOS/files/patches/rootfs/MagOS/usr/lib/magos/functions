#!/bin/bash
# Make from ini file text file with strings like [SECTION]Name=Value
# $1 - input filename
# stdout - result file
function ini2simple()
{
 SECTION='[]'
 cat $1 | while read a ;do
  [ "$a" = "" ] && continue
  if [ "${a#\[*\]}" = "" -a "$a" != "" ] ;then
     SECTION=$a
  else
     echo "$SECTION$a"
  fi
 done
}

# Restore ini file from text file with strings like [SECTION]Name=Value
# $1 - input filename
# stdout - result file
function simple2ini()
{
 LASTSECTION='[]'
 cat $1 | while read a ;do
  SECTION=${a%%\]*}']'
  if [ "$SECTION" != "$LASTSECTION" ] ;then
     [ "LASTSECTION" != "[]" ] && echo
     echo "$SECTION"
     LASTSECTION=$SECTION
  fi
  echo ${a#\[*\]}
 done
}

# It include string from $2 file and apply to $1 file
# $1 - base file
# $2 - included file
function apply2simple()
{
 cat "$2" | while read a ;do
  SECTION=${a%%\]*}
  SECTION=${SECTION#\[}
  STR=${a#\[*\]}
  PNAME=${STR%%=*}
  PVAL=${a#*=}
#  echo $SECTION $PNAME $PVAL
  echo -ne >"$1.tmp"
  echo -ne >"$1.lck"
  FOUNDS=
  cat "$1" | while read b ;do
     BSECTION=${b%%\]*}
     BSECTION=${BSECTION#\[}
     BSTR=${b#\[*\]}
     BPNAME=${BSTR%%=*}
     BPVAL=${b#*=}
     
     [ "$BSECTION" = "$SECTION" ] && FOUNDS=1
     if [ "$BSECTION" = "$SECTION" -a "$BPNAME" = "$PNAME" ] ;then
        b="$a"
        rm -f "$1.lck"
     fi
     if [ "$BSECTION" != "$SECTION" -a "$FOUNDS" != "" -a -f "$1.lck" ] ;then
        echo "$a"  >> "$1.tmp"
        rm -f "$1.lck"
     fi
     echo "$b" >> "$1.tmp"
  done
  [ -f "$1.lck" ] && echo "$a" >> "$1.tmp"
  mv -f "$1.tmp" "$1"
  rm -f "$1.lck"
 done
}

# It include string from $2 ini file and apply to $1 ini file
# $1 - base file
# $2 - included file
function concatenate_ini()
{
 [ -f "$1" -a -f "$2" ] || return 1
 ini2simple "$1" >"$1.tmp"
 ini2simple "$2" >"$2.tmp"
 apply2simple "$1.tmp" "$2.tmp"
 simple2ini "$1.tmp" >"$1"
 rm -f "$1.tmp" "$2.tmp"
}

detectDE()
{
    if [ x"$KDE_FULL_SESSION" = x"true" ]; then SESSION=kde
    elif [ x"$DESKTOP_SESSION" = x"LXDE" ]; then SESSION=lxde
    elif [ x"$XDG_CURRENT_DESKTOP" = x"LXQt" ]; then SESSION=lxqt
    fi
    if [ -z "$SESSION" ] ;then 
         ps -A | grep -q "kdeinit" && SESSION=kde
         ps -A | grep -q "gnome-panel" && SESSION=gnome
         ps -A | grep -q "gnome-shell" && SESSION=gnome-shell
    fi
    [ "$SESSION" = "kde" -a -f /etc/X11/wmsession.d/01Plasma ] && SESSION=plasma
    [ -z "$SESSION" -a -x /usr/bin/startlxde ] && SESSION=lxde
    [ -z "$SESSION" -a -x /usr/bin/startlxqt ] && SESSION=lxqt
    echo $SESSION
}

# ===========================================================
# liblinuxlive functions
# ===========================================================

debug_log()
{
   if grep -q "debug" /proc/cmdline ; then
      echo "- debug: $*" >&2
      log "- debug: $*"
   fi
}

log()
{
   echo "$@" 2>/dev/null >>/var/log/magoslog
}

debug_mode()
{
  if [ "$(cmdline_parameter debug)" -o "$DEBUGMODE" == "yes" ] ; then
     name=$(basename $0)
     slash="/"
     [ "$(pwd)" == "/union" ] && slash=""
     if ! test -f  ${slash}var/log/magos/${name}.log ; then
        echo "$0 --  debug mode enabled"
        test -d ${slash}var/log/magos || mkdir -p ${slash}var/log/magos
        echo $(date) >   ${slash}var/log/magos/${name}.log || echo "can not create log file"
        $0 "$@" 2>&1 | tee -a ${slash}var/log/magos/${name}.log
        exit 0
     fi
  fi
}

echodebug()
{
  [ "$DEBUG_IS_ENABLED" -o "$DEBUGMODE" == "yes" ] && echo "$1"
  if [ -n "$2" ] ;then
    command=$2
    shift ; shift
    if [ -z $1 ] ;then
      $command
    else
      $command "$@"
    fi
  fi
}

# Create module
# call mksquashfs with apropriate arguments
# $1 = directory which will be compressed to squashfs module
# $2 = output filesystem module file
# $3..$9 = optional arguments like -keep-as-directory or -b 123456789
#
create_module()
{
   . /usr/lib/magos/os-config
   . /etc/sysconfig/MagOS
   echo " $@ " | egrep -q ' -comp | -noD ' && MKSQFS_OPTS=
   mksquashfs "$1" "$2" $MKSQFS_OPTS $3 $4 $5 $6 $7 $8 $9 -noappend >/dev/null || return 1
   chmod 444 "$2"
}

# look into cmdline and echo $1 back if $1 is set
# $1 = value name, case sensitive, for example 'debug'
#
cmdline_parameter()
{
   . /etc/sysconfig/MagOS || . etc/sysconfig/MagOS
   echo -n " $CMDLINE " | cat /proc/cmdline - 2>/dev/null | tr "[:cntrl:]" " " | egrep -m1 -o "(^|[[:space:]])$1([[:space:]]|\$)" | head -1 | tr -d " "
}

# look into cmdline and echo value of $1 option
# $1 = value name, case sensitive, for example 'changes'
#
cmdline_value()
{
   . /etc/sysconfig/MagOS || . etc/sysconfig/MagOS
   echo -n " $CMDLINE " | cat /proc/cmdline - 2>/dev/null | tr "[:cntrl:]" " " | egrep -m1 -o "(^|[[:space:]])$1=[^[:space:]]+" | head -1 | cut -d "=" -f 2-
}

# Find and run all scripts from the given module
# This function is used by the activate and deactivate script when the distro
# is already started, not during live setup
# $1 = mounted module full path
# $2..$n = optional arguments for the scripts, eg. 'start'
#
find_n_run_scripts()
{
   debug_log "find_n_run_scripts" "$*"
   local MOD

   MOD="$1"
   shift

   RCPATH=/etc/rc.d/init.d
   RUNLEVEL=$(runlevel | awk '{print $2}')
   [ -z "$RUNLEVEL" ] || RCPATH=/etc/rc.d/rc$RUNLEVEL.d
   RUNSCRIPTS="$MOD$RCPATH|$MOD/usr/lib/magos/rc.local|$MOD/usr/lib/magos/rc.post"
   echo $@ | grep -q start || RUNSCRIPTS="$MOD$RCPATH"

   find "$MOD" | egrep "$RUNSCRIPTS" | cut -b "${#MOD}"- | cut -b 2- | xargs -n 1 -r readlink -f | sort -u | \
       while read SCRIPT; do
         if [ "$SCRIPT" != "" -a -x "$SCRIPT" -a ! -d "$SCRIPT" ]; then
            # call the script by real path, not from the module
            log "starting '"$SCRIPT" $@'"
            "${SCRIPT}" "$@"
         fi
       done
}

# test if the script is started by root user. If not, exit
allow_only_root()
{
  if [ "0$UID" -ne 0 ]; then
     echo "Only root can run $(basename $0)"; exit 1
  fi
}
