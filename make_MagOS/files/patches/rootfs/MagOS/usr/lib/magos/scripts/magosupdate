#!/bin/bash

function echolog()
{
 echo magosupdate: $(date +"%Y-%m-%d %H:%M:%S") $@ >>$LOGFILE
 echo magosupdate: $(date +"%Y-%m-%d %H:%M:%S") $@ >>/dev/stdout
}

function echoerror()
{
 echolog $@
 exit 1
}

function echowall()
{
 wall $([ "$UID" = "0" ] && echo " -n ") $(gettext -s "$1")
}

function findmagosdir()
{
 if [ -d /memory/layer-base/0 ] ;then
   MAGOSDEV=$(grep -m1 " /memory/layer-base/0 " /proc/self/mountinfo | awk '{ print $10 }')
   [ -e "$MAGOSDEV" ] || exit 1
   MAGOSPATH=$(findmnt -lnf $MAGOSDEV -o TARGET)$(grep -m1 " /memory/layer-base/0 " /proc/self/mountinfo | awk '{ print $4 }')
 elif [ -f /mnt/live/etc/modules ] ;then
   . /mnt/live/etc/modules
   [ ! -z "$MAGOSMODS" -a -d "$MAGOSMODS/base" ] && MAGOSPATH="$MAGOSMODS"
 fi
 [ -z "$MAGOSPATH" ] && MAGOSPATH=/mnt/livemedia/MagOS
 [ -f "$MAGOSPATH/vmlinuz" -a -d "$MAGOSPATH/base" ] || exit 1
 ARCH=$(gawk '{print $1}' "$MAGOSPATH/VERSION")
 [ -z "$ARCH" ] && exit 1
 if echo "$MAGOSPATH" | grep -q [.bak]$ ;then
    echolog "System started from backup folder $MAGOSPATH"
    MAGOSPATH=$(echo $MAGOSPATH | sed s%[.]bak$%%)
    [ -d "$MAGOSPATH" ] || exit 1
    RUNFROMBACKUP=1
 fi
}

function initparameters()
{
 export TEXTDOMAINDIR=/usr/share/locale
 export TEXTDOMAIN=magos_functions
 TMPDIR="/tmp/magosupdate-$UID"
 LOGFILE=/tmp/magosupdate-$UID.log
 rm -fr "$TMPDIR" 2>/dev/null
 mkdir -p "$TMPDIR"
 touch $LOGFILE
 chmod 666 $LOGFILE
 MUPDRSYNCOPT="--inplace -rtc"
 MAGOSUPDATEPROT=rsync
 MAGOSUPDATESERVER=mirror.yandex.ru
 MAGOSUPDATESHARE=:/mirrors/magos/netlive
 MAGOSUPDATEMODSSHARE=:/mirrors/magos/modules
 . /etc/MagOS/config
 findmagosdir
 MAGOSUPDATEURL=$MAGOSUPDATEPROT://$MAGOSUPDATESERVER$MAGOSUPDATESHARE/$ARCH/MagOS/
 MAGOSUPDATEMODSURL=$MAGOSUPDATEPROT://$MAGOSUPDATESERVER$MAGOSUPDATEMODSSHARE/$ARCH/
 MAGOSUPDATEINTURL=$MAGOSUPDATEPROT://$MAGOSUPDATESERVER$MAGOSUPDATEMODSSHARE/$ARCH/international/
}

# $1 filename
# $2 directory to save
function download()
{
 case $MAGOSUPDATEPROT in
    rsync)
        echolog "Downloading $MAGOSUPDATEURL$1 to $(readlink -f $2)"
        rsync $MUPDRSYNCOPT "$MAGOSUPDATEURL$1" "$2" >/dev/null 2>&1 && return 0
        ;;
    *)
        echoerror "Protocol $MAGOSUPDATEPROT is not supported currently, sorry"
 esac
 echoerror "Download failed"
}

# $1 filename
# $2 directory to save
function cdownload()
{
 [ -f "$2/$1" ] && return 0
 download "$1" "$2" || return 1
}

# $1 filelist (MD5SUM)
# $2 directory to save
function downloadfromlist()
{
 for a in $(gawk '{print $2}' $1) ;do
    download $a "$2"/$(dirname "$a")
 done
}

# $1 modulename
# $2 directory to save
function downloadmod()
{
 case $MAGOSUPDATEPROT in
    rsync)
        echolog "Trying to download $MAGOSUPDATEMODSURL$1 to $(readlink -f $2)"
        if ! rsync $MUPDRSYNCOPT "$MAGOSUPDATEMODSURL$1" "$2" 2>/dev/null ;then
	    echolog "Trying to download $MAGOSUPDATEINTURL$1 to $(readlink -f $2)"
    	    rsync $MUPDRSYNCOPT "$MAGOSUPDATEINTURL$1" "$2" 2>/dev/null || return 1
        fi
        ;;
    *)
        echoerror "Protocol $MAGOSUPDATEPROT is not supported currently, sorry"
 esac
}

# $1 path to module dir
function downloadmodules()
{
 pushd "$1" >/dev/null
 for a in *.xzm ;do
    [ -f "$a" ] || continue
    downloadmod "$a" . || echolog "Warning: Can't find module "$a" on server, file was not updated"
 done
 popd >/dev/null
}

function checkserver()
{
 echolog "Checking connection to server ..."
 download VERSION    "$TMPDIR"
 download MD5SUM     "$TMPDIR"
 download MD5SUM.sig "$TMPDIR"
 echolog "Connection to server is ok"
}

# $1 original MD5SUM
# $2 new MD5SUM
# $3 MD5SUM with updates
function comparemdsum()
{
 rm -f "$3" 2>/dev/null
 cat "$2" | grep . | while read a ;do
    grep -q "$a" "$1" || echo "$a" >> "$3"
 done
 [ -f "$3" ] || return 1
}

# $1 original MD5SUM
# $2 new MD5SUM
function updatemdsum()
{
 rm -f "$1.new"
 cat "$1" | grep . | while read a ;do
    grep "$a" "$2" >> "$1.new"
 done
 mv -f "$1.new" "$1"
}

# $1 MD5SUM file
# $2 directory with files
function checkfilesums()
{
 [ -f "$1" ] || echoerror "$1 not exists"
 echolog "Checking MD5 sums for files..."
 pushd "$2" >/dev/null
 for a in $(awk '{print $2}' "$1") ;do
    MDS=$(md5sum "$a")
    if ! grep -q "$MDS" "$1" ;then
	echowall "System update error"
        echoerror "md5sum for $a incorrect."
    fi
 done
 popd >/dev/null
 echolog "Checking complete."
}

# $1 signature
# $2 file to check
function checksign()
{
 for a in /usr/share/magos/pubkeys/*.gpg ;do
    if gpg --verify --keyring $a "$1" "$2" >/dev/null 2>&1 ;then
	echolog "File $(basename $2) signed by $(basename $a)"
	return 0
    fi
 done
 echoerror "Incorrect signature in $(basename $1)"
}

function checknewversion()
{
 echolog "Checking for new version ..."
 cdownload VERSION    "$TMPDIR"
 cdownload MD5SUM     "$TMPDIR"
 cdownload MD5SUM.sig "$TMPDIR"
 checksign "$TMPDIR/MD5SUM.sig" "$TMPDIR/MD5SUM" || exit 1
 MAGOSVER=$(gawk '{print $2}' "$MAGOSPATH/VERSION")
 NEWVER=$(gawk '{print $2}' "$TMPDIR/VERSION")
 if ! [ "0$NEWVER" -gt "0$MAGOSVER" ] ;then
    echolog "New version not found."
    return 1
 fi
 echolog "Found new version $NEWVER"
}

function checkupdates()
{
 echolog "Checking for updates ..."
 cdownload VERSION    "$TMPDIR"
 cdownload MD5SUM     "$TMPDIR"
 cdownload MD5SUM.sig "$TMPDIR"
 checksign "$TMPDIR/MD5SUM.sig" "$TMPDIR/MD5SUM" || exit 1
 MAGOSVER=$(gawk '{print $2}' "$MAGOSPATH/VERSION")
 NEWVER=$(gawk '{print $2}' "$TMPDIR/VERSION")
 if [ "0$NEWVER" != "0$MAGOSVER" ] ;then
    echolog "System version doesn't match server version"
    return 1
 fi
 if ! comparemdsum "$MAGOSPATH/MD5SUM" "$TMPDIR/MD5SUM" "$TMPDIR/MD5SUM.updates" ;then
    echolog "Updates are not founded."
    return 1
 fi
 awk '{print $2}' "$TMPDIR/MD5SUM.updates" | while read a ;do
    echolog "Found updated file: $a"
 done
}

function checkrootfs()
{
 if grep $(df "$MAGOSPATH" | tail -1 | awk '{print $NF}') /proc/mounts | awk '{print "," $4 ","}' | grep -q ,ro, ;then
    echoerror "Error: root filesystem is mounted as readonly."
 fi
}

function checkneedroot()
{
 if [ -w "$MAGOSPATH" ] ;then
    echolog "Checking user acceess: ok."
 else
    echolog "Checking user acceess: failed."
    return 1
 fi
}

# $1 optional parameter
function restartasroot()
{
 if [ "$UID" != "0" ] ;then
    echolog "Restarting script as root."
    if sudo -l $(basename $0) $@ >/dev/null 2>&1 ;then
      sudo $(basename $0) $@
    else
      beesu -l /bin/bash $(readlink -f $0) $@ || echolog "Failed."
    fi
    exit $?
 fi
}

function startwall()
{
 echolog "--------------- Magosupdate started by user $UID -------------------"
 echowall "System update started. Please wait."
}

function endwall()
{
 if grep -qi "please reboot" "$LOGFILE" ;then
    echowall "System update finished. Please reboot."
 else
    echowall "System update finished."
 fi
}

# $1 modulename
function ismodactive()
{
 grep -q /$(basename "$1")[[:space:]] /proc/mounts || return 1
}

# $1 modulename
function deletemodule()
{
 if ismodactive "$1" ;then
    if ! deactivate $(basename "$1") ;then
	echolog "Can't deactivate module $(basename $1), please reboot."
	mv -f "$1" "$TMPDIR"
	return 1
    fi
 fi
 rm -f "$1"
}

# $1 full path to MD5SUM
# $2 path to base directory
function deleteobsolete()
{
 pushd "$2" >/dev/null
 echolog "Removing obsolete modules..."
 for a in * ;do
    grep -q "/$a$" "$1" 2>/dev/null && continue
    echo $a | egrep -qi "local|[*]" && continue
    if [ "$DEACTIVATE" = "yes" ] ;then
        deletemodule "$a"
    else
        rm -f "$a"
    fi
    echolog "removed obsolete file $a"
 done
 popd >/dev/null
}

function movedisabled()
{
 echolog "Moving disabled base modules to optional..."
 cd base
 for a in *.xzm ;do
    [ -f "$MAGOSPATH/optional/$a" -a ! -f "$MAGOSPATH/base/$a" ] || continue
    [ -f "$a" ] && mv -f "$a" ../optional && echolog "Moved module $a to optional"
 done
 cd ..
}

function moveupdates()
{
 echolog "Moving updates to system directory..."
 find ./ -type f | grep -v MD5SUM | sed s=^./== | while read a ;do
    echolog "Moving file $a"
    ismodactive "$a" && deletemodule $MAGOSPATH/$a
    if [ ! -f "$MAGOSPATH/$a" ] ;then
	mv -f "$a" "$MAGOSPATH/$a"
	activate "$MAGOSPATH/$a" >/dev/null 2>/dev/null
    else
	mv -f "$a" "$MAGOSPATH/$a"
    fi
    sed -i /"$(basename $a)$"/d "$MAGOSPATH/MD5SUM"
    grep $(basename "$a") "MD5SUM" 2>/dev/null >> "$MAGOSPATH/MD5SUM"
 done
 echolog "Moving complete."
}

function updateversion()
{
 startwall

 echolog "Preparing new directory ${MAGOSPATH}.upd ..."
 [ -d "${MAGOSPATH}.bak" -a "$RUNFROMBACKUP" != "1" ] && rm -fr "${MAGOSPATH}.bak"
 mkdir -p "${MAGOSPATH}.upd"
 cd "${MAGOSPATH}.upd" || echoerror "Can't create directory ${MAGOSPATH}.upd"
 mv -f $TMPDIR/VERSION VERSION
 cp -pfr -t ./ "$MAGOSPATH/"*.sgn "$MAGOSPATH/"*.ini "$MAGOSPATH/machines" "$MAGOSPATH/modules" "$MAGOSPATH/optional"
 [ -d base ] || cp -pfr -t ./ "$MAGOSPATH/base"
 echolog "Destination directory is ready now."

 echolog "Downloading system files..."
 download LICENSE		.
 download boot.tar.bz2		.
 download MagOS-Data.tar.bz2 	.
 download MD5SUM		.
 download MD5SUM.sig		.
 downloadfromlist MD5SUM	.
 downloadmodules "modules"
 downloadmodules "optional"
 echolog "Downloading finished."

 checksign MD5SUM.sig MD5SUM
 checkfilesums "MD5SUM" "./"

 movedisabled

 DEACTIVATE=no deleteobsolete "$PWD/MD5SUM" base

 echolog "Renaming livemedia folders..."
 sync
 if [ "$RUNFROMBACKUP" != "1" ] ;then
   mv "${MAGOSPATH}" "${MAGOSPATH}.bak" || exit 1
 else
   rm -fr "${MAGOSPATH}"
 fi
 mv "${MAGOSPATH}.upd" "${MAGOSPATH}"

 echolog "Update finished. Please reboot."
 cat $LOGFILE >> "${MAGOSPATH}.bak/magosupdate.log"

 endwall
}

function updatebase()
{
 startwall

 echolog "Preparing new directory ${MAGOSPATH}.upd"
 mkdir -p "${MAGOSPATH}.upd"/{base,optional,modules}
 cd "${MAGOSPATH}.upd" || echoerror "Can't create directory ${MAGOSPATH}.upd"
 cp -pfr -t ./ "$MAGOSPATH/modules"
 md5sum modules/* >"$TMPDIR/MD5SUM.modules.1" 2>/dev/null
 comparemdsum "$MAGOSPATH/MD5SUM" "$TMPDIR/MD5SUM" "MD5SUM"
 echolog "Destination directory is ready now."

 echolog "Downloading updates..."
 downloadfromlist MD5SUM . || exit 1
 downloadmodules  modules
 downloadmodules  optional
 echolog "Downloading finished."

 checkfilesums "MD5SUM" "./"

 movedisabled

 # if modules wasn't updated delete them
 md5sum modules/* >"$TMPDIR/MD5SUM.modules.2" 2>/dev/null
 comparemdsum "$TMPDIR/MD5SUM.modules.1" "$TMPDIR/MD5SUM.modules.2" "$TMPDIR/MD5SUM.modules.updated"
 DEACTIVATE=no deleteobsolete "$TMPDIR/MD5SUM.modules.updated" "modules"

 moveupdates

 updatemdsum "$MAGOSPATH/MD5SUM" "$TMPDIR/MD5SUM"
 DEACTIVATE=yes deleteobsolete "$MAGOSPATH/MD5SUM" "$MAGOSPATH/base"
 cp -pfr -t "$MAGOSPATH" "$TMPDIR/MD5SUM" "$TMPDIR/MD5SUM.sig"
 rm -fr "${MAGOSPATH}.upd"

 echolog "Update finished."

 endwall
}

function updatemodules()
{
 startwall

 echolog "Preparing new directory ${MAGOSPATH}.upd"
 mkdir -p "${MAGOSPATH}.upd"/modules
 cd "${MAGOSPATH}.upd" || echoerror "Can't create directory ${MAGOSPATH}.upd"
 cp -pfr -t ./ "$MAGOSPATH/modules"
 md5sum modules/* >"$TMPDIR/MD5SUM.modules.1" 2>/dev/null
 echolog "Destination directory is ready now."

 echolog "Downloading updates..."
 downloadmodules  modules
 downloadmodules  optional
 echolog "Downloading finished."

 # if modules wasn't updated delete them
 md5sum modules/* >"$TMPDIR/MD5SUM.modules.2" 2>/dev/null
 comparemdsum "$TMPDIR/MD5SUM.modules.1" "$TMPDIR/MD5SUM.modules.2" "$TMPDIR/MD5SUM.modules.updated"
 DEACTIVATE=no deleteobsolete "$TMPDIR/MD5SUM.modules.updated" "modules"

 moveupdates

 rm -fr "${MAGOSPATH}.upd"

 echolog "Update finished."

 endwall
}

function revertversion()
{
 echolog "Downgrading to old version ..."
 if [ -d "${MAGOSPATH}.bak" ] ;then
     echolog "Renaming current version ${MAGOSPATH} to ${MAGOSPATH}.del"
     mv "${MAGOSPATH}" "${MAGOSPATH}.del" || exit 1
     echolog "Renaming ${MAGOSPATH}.bak to ${MAGOSPATH}"
     mv "${MAGOSPATH}.bak" "${MAGOSPATH}" || exit 1
     echolog "Removing ${MAGOSPATH}.del"
     rm -fr "${MAGOSPATH}.del" || exit 1
     sync
     echolog "Downgrading finished. Please reboot."
     endwall
 else
     echolog "Folder ${MAGOSPATH}.bak is not found."
     exit 1
 fi
}


function help()
{
 echo "This script updates system from server"
 echo "Usage: $(basename $0) [parameter]"
 echo "Parameters:"
 echo " -h|--help		this help"
 echo " -cd|--checkdir		shows system directory and check FS for readonly"
 echo " -cr|--checkroot	checks if root access is required"
 echo " -cv|--checknewversion	checks for new version is available"
 echo " -cu|--checkupdates	checks for new updated modules are available"
 echo " -cs|--checkserver	checks connection to server"
 echo " -uv|--updateversion	updates system release if it's available"
 echo " -ub|--updatebase	updates system modules if they are was updated on server"
 echo " -um|--updatemodules	updates optional modules if they will be founded on server"
 echo " -rv|--revertversion	revert system to old version, if folder MagOS.bak is exists"
 echo "Script without parameters does all checks and tryes to update system if it's necessary."
}

initparameters
case $1 in
    -cd|--checkdir)
	echolog "MagOS $ARCH directory found at $MAGOSPATH"
	checkrootfs && exit 0 || exit 1
    ;;
    -cr|--checkroot)
	checkneedroot && exit 0 || exit 1
    ;;
    -cv|--checknewversion)
	checknewversion && exit 0 || exit 1
    ;;
    -cu|--checkupdates)
	checkupdates && exit 0 || exit 1
    ;;
    -cs|--checkserver)
	checkserver && exit 0 || exit 1
    ;;
    -uv|--updateversion)
	if checknewversion ;then
	    checkneedroot || restartasroot -uv
	    updateversion && exit 0 || exit 1
	fi
    ;;
    -ub|--updatebase)
	if checkupdates ;then
	    restartasroot -ub
	    updatebase && exit 0 || exit 1
	fi
    ;;
    -um|--updatemodules)
	restartasroot -um
	updatemodules && exit 0 || exit 1
    ;;
    -rv|--revertversion)
	restartasroot -rv
	revertversion && exit 0 || exit 1
    ;;
    ""|--auto)
	checkrootfs || exit 1
	checkserver || exit 1
	if checknewversion ;then
	    checkneedroot || restartasroot
	    updateversion
	elif checkupdates ;then
	    restartasroot
	    updatebase
	fi
	exit 0
    ;;
    *)
        help
    ;;
esac

exit 0
