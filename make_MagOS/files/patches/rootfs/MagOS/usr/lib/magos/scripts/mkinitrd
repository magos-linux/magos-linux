#!/bin/bash
# License: GPL last version . Лицензия : GPL последней версии
# Written: Mikhail Zaripov . Написано: Михаил Зарипов
# Last modified: ___  . Исправлено _____

export PATH=/usr/lib/magos/scripts:$PATH 

. /usr/lib/magos/functions

ARCH=32
[ -d /lib64 ] && ARCH=64
MODULEFORMAT=xzm

# binaries for /bin
INIRAMDBIN1="busybox.static lspci httpfs blkid blockdev"
# binaries for /usr/bin
INIRAMDBIN2='dosfsck fsck fsck.ext2 reiserfsck rsync losetup ntfsfix mksquashfs unsquashfs
  ntfs-3g.probe ntfs-3g fusermount  mount.fuse ulockmgr_server sshfs shred cat ls dialog loadkeys unrar curlftpfs cryptsetup'
# optional binaries for /usr/bin
INIRAMDBINOPT="resume fsck.reiser4"

INITRDMODULES='kernel/fs/aufs kernel/fs/squashfs kernel/fs/fuse/fuse. kernel/fs/unionfs/unionfs.
  kernel/fs/isofs kernel/fs/fat kernel/fs/ntfs kernel/fs/reiserfs kernel/fs/xfs
  kernel/fs/nfs/ kernel/fs/nfs_common kernel/fs/lockd kernel/fs/fscache
  kernel/fs/ext kernel/fs/jbd kernel/fs/nls/nls_cp866. kernel/fs/nls/nls_utf8.
  kernel/drivers/block/loop. kernel/drivers/block/cryptoloop.
  kernel/drivers/scsi/sr_mod. kernel/drivers/scsi/sd_mod. kernel/drivers/scsi/scsi_mod. kernel/drivers/scsi/vmw_pvscsi.
  kernel/drivers/ata kernel/drivers/ide
  kernel/drivers/usb/core/usbcore. kernel/drivers/usb/usb-common. kernel/drivers/usb/storage
  kernel/drivers/usb/host/ehci kernel/drivers/usb/host/ohci kernel/drivers/usb/host/uhc kernel/drivers/usb/host/xhci kernel/drivers/usb/host/ohci
  kernel/drivers/hid/hid. kernel/drivers/hid/usbhid kernel/drivers/hid/hid-generic.
  kernel/drivers/pcmcia  kernel/drivers/mmc/core kernel/drivers/mmc/card
  kernel/drivers/crypto/ccp kernel/drivers/md/dm-crypt.
  kernel/drivers/dca
  kernel/net/sunrpc/sunrpc. kernel/net/sunrpc/auth_gss/auth_rpcgss. kernel/net/packet/af_packet.
  kernel/arch/x86/crypto/crc kernel/arch/x86/crypto/aes
  kernel/crypto/cbc. kernel/crypto/aes_generic. kernel/crypto/cryptd. kernel/crypto/crypto_simd
  kernel/lib/crc16. kernel/lib/crc-t10dif. kernel/lib/zlib_'

INITRDNETWORKDRIVERS='3c59x e100 eepro100 e1000 hp100 ne2k-pci r8169 8139too 8139cp via-rhine forcedeth e2100 eepro eexpress pcnet32
   3c501 3c503 3c505 3c507 3c509 3c515 tg3 jme virtio_net atl1 atl1c atl2 igb alx'

# add space (Mb) for ext2 system space losses
RAMPLUSSIZE=4

MYPATH="$(pwd)"
INITRDFOLD=/tmp/mkinitrd-$$
INITRDIMG=/tmp/initrd.img-$$
MOUNTDIR=/tmp/mkinitrd_mountdir_$$

# Copy librarries
# $1 - filename
# $2 - destination dir
function copy_lib()
{
# echo copy_lib \"$1\" \"$2\"
# [ -h $2/$1 ] && rm -f $2/`readlink $1 | awk -F/ '{ print $(NF)}'` $2/$1
 LIBFOUND=
 for a in /usr/lib64 /lib64 /usr/lib /lib ;do
    LIBFOUND=$(ls -1 $a/$1 2>/dev/null)
    [ ! -z "$LIBFOUND" ] && break
 done
 if [ ! -z "$LIBFOUND" ] ;then
    for a in $LIBFOUND ;do
       LINK=$(basename $a)
       LIB=$(readlink -f $a)
       DIR=$(dirname $a)
       [ -f $LIB ] || LIB=$DIR/$LIB
       cp -pf $LIB $2
       [ "$LIB" != "$a" ] && ln -sf $(basename $LIB) $2/$LINK
       true
    done
 else
    echo " Warning: $1 not found"
 fi
}
# Copy binaries
# $1 - filename
# $2 - destination dir
function copy_bin()
{
 for a in /usr/lib/magos/scripts /sbin /usr/sbin /bin /usr/bin ;do
    [ -x "$a/$1" ] || continue
    cp -Lf $a/$1 $2 && break
 done
 if [ ! -x "$2/$1" ] ;then
    echo " Warning: $1 not found"
 fi
}

#Copy kernel module
# $1 - path
# $2 - kernel name
function copy_mod()
{
  mkdir -p $(dirname lib/modules/$2/$1)
  cp -pHR /lib/modules/$2/$1* $(dirname lib/modules/$2/$1) 2>/dev/null || echo " Warning: module $(basename $1) not found"
}

function usage()
{
 echo -e "usage $0 <initrd-image> <kernel-version> \n example: $0 /boot/initrd-$(uname -r).img $(uname -r)"
 exit 1
}

function mknoddevs()
{
 for a in $(seq 1 $2) ;do
   mknod dev/$1$a $3 $4 $(($5+$a))
 done
}

function mknodhd()
{
 mknod dev/$1 $2 $3 $4
 mknoddevs $1 15 $2 $3 $4
}

function mknodscsi()
{
 dn=0
 for a in $1 ; do
   mknodhd sd$a $2 $3 $dn
   dn=$(($dn + 16))
 done
}

[ "$1" = "" -o  "$1" = "--version" -o "$1" = "--help" -o "$1" = "--help"  ] && usage

#cmdline processing
while [ "$1" != ""  ] ;do 
    if [ "$1" = "--preload" ];then
       shift ;shift ;continue
    fi
    if [ "$(echo $1 | cut -c 1-2 )" = "--" ] ;then
       shift ;continue
    fi
    FILENAME=$1
    KERNEL=$2
    shift; shift
done

[ -z "$KERNEL" ] && KERNEL=$(ls -1 /lib/modules | tr -d / | grep [0-9]- | tail -1)
[ -z "$FILENAME" -o -z "$KERNEL" ] && usage
echo "Creating $FILENAME for kernel $KERNEL"

echo "Creating filesystem in $INITRDFOLD"
rm -fr "$INITRDFOLD"
mkdir -p "$INITRDFOLD" || exit 1
cd "$INITRDFOLD" || exit 1
cp -R --preserve /usr/share/magos/initrd/* ./ || exit 1
[ "$ARCH" = "64" ] && cp -fR --preserve /usr/share/magos/initrd64/* ./
mkdir -p etc dev bin mnt proc lib sys tmp var/log etc/default usr/lib usr/bin usr/share/locale/ru_RU.UTF-8 lib/modules/$KERNEL/kernel/fs
if [ -f /etc/magos-release ] ;then
   cp -p /etc/magos-release ./VERSION || exit 1
else
   cp -p /mnt/live/VERSION ./VERSION || exit 1
fi
cp -p /usr/lib/magos/scripts/liblinuxlive ./ || exit 1
ln -sf bin sbin
touch etc/{m,fs}tab


echo "creating devices"
mknod dev/console c 5 1
mknod dev/fb0 c 29 0
mknod dev/null c 1 3
mknod dev/zero c 1 5
mknod dev/ram b 1 1
mknod dev/fuse c 10 229
mknod dev/sr0 b 11 0
mknod dev/sr1 b 11 1
mknod dev/systty c 4 0
mknod dev/tty c 5 0
mknoddevs tty 6 c 4 0
mknod dev/loop b 7 0
mknoddevs loop 127 b 7 0
mknodhd hda b 3 0
mknodhd hdb b 3 64
mknodhd hdc b 22 0
mknodhd hdd b 22 64
mknodscsi "a b c d e f g h i j k l m n o p" b 8
mknodscsi "q r s t u v w x y z" b 65

echo "copying binaries"
for a in $INIRAMDBIN1 ;do
  copy_bin $a bin || exit 1
done
for a in $INIRAMDBIN2 ;do
  copy_bin $a usr/bin || exit 1
done
for a in $INIRAMDBINOPT ;do
  copy_bin $a usr/bin
done
mv bin/busybox.static bin/busybox || exit 1
mv usr/bin/losetup usr/bin/losetup.real || exit 1
if [ -x /bin/kmod ] ;then
   cp -pf /bin/kmod  bin
fi
[ -f /usr/share/pci.ids ] && cp -f /usr/share/pci.ids      usr/share
[ -d /usr/share/locale/ru_RU.UTF-8 ] && cp -pHR /usr/share/locale/ru_RU.UTF-8/* usr/share/locale/ru_RU.UTF-8

echo "copying libraries"
for a in bin/* ; do
   ldd 2>/dev/null $a | awk '{print $1}' | sed 's=^.*/=='
done | sort -u  > liblist
cat liblist | while read a ;do
  copy_lib $a lib || exit 1
done
ls -1 lib/*.so* | sed s=lib/== > liblist
for a in usr/bin/* ; do
   ldd 2>/dev/null $a | awk '{print $1}' | sed 's=^.*/=='
done | sort -u | grep -vf liblist > usrliblist
cat usrliblist | while read a ;do
  copy_lib $a usr/lib || exit 1
done
rm -f liblist usrliblist

echo "making links"
if [ "$ARCH" = "64" ] ;then
   ln -s lib lib64
   ln -s lib usr/lib64
fi
ln -sf $(basename lib/libz.so.?)  lib/libz.so
# build links to busybox's functions from busybox's own help text
for i in $(bin/busybox --help | grep -v Copyright | grep , | tr , " "); do
   ln -s busybox bin/$i 2>/dev/null
done
if [ -x bin/kmod ] ;then
   for a in lsmod rmmod insmod modinfo modprobe depmod ;do
      ln -sf kmod bin/$a
   done
fi
ln -sf ../usr/bin/mksquashfs   bin/mksquashfs || exit 1
ln -sf ../usr/bin/unsquashfs   bin/unsquashfs || exit 1
ln -sf ../usr/bin/ntfs-3g      bin/ntfsmount  || exit 1
ln -sf dosfsck    usr/bin/fsck.msdos    || exit 1
ln -sf dosfsck    usr/bin/fsck.vfat     || exit 1
ln -sf fsck.ext2  usr/bin/fsck.ext3     || exit 1
ln -sf fsck.ext2  usr/bin/fsck.ext4     || exit 1
ln -sf fsck.ext2  usr/bin/fsck.ext4dev  || exit 1
ln -sf reiserfsck usr/bin/fsck.reiserfs || exit 1
ln -sf ntfs-3g    usr/bin/ntfsmount     || exit 1
ln -sf /bin/ntfs-3g usr/bin/mount.ntfs-3g || exit 1

echo "copying modules"
for mod in $INITRDMODULES; do
  copy_mod $mod $KERNEL
done

echo "copying network modules"
for mod in $INITRDNETWORKDRIVERS ; do
   cat /lib/modules/$KERNEL/modules.dep | grep -F /$mod.ko | while read LINE; do
      for dep in $(echo $LINE | tr -d ":" ); do
         copy_mod $dep $KERNEL || exit 1
      done
   done
done

echo "unpacking all kernel modules for initrd"
find lib -noleaf -name "*.ko.gz" | xargs -r gunzip || exit 1
find lib -noleaf -name "*.ko.xz" | xargs -r unxz || exit 1

echo "generating module dependency files"
copy_mod modules.order $KERNEL || exit 1
copy_mod modules.builtin $KERNEL || exit 1
depmod -b "$INITRDFOLD" $KERNEL || exit 1
#BUGFIX for Rosa 2012.1
touch /lib/modules/$KERNEL/modules.pcimap

echo "compressing usr in initrd"
create_module usr usr.$MODULEFORMAT || exit 1
chmod ago-x usr.$MODULEFORMAT || exit 1
rm -Rf usr/*

echo "compressing net in initrd"
mkdir -p tmp_xzm/fs tmp_xzm/drivers
mv lib/modules/$KERNEL/kernel/drivers/[ac-z]* tmp_xzm/drivers || exit 1
mv lib/modules/$KERNEL/kernel/net tmp_xzm || exit 1
mv lib/modules/$KERNEL/kernel/fs/[b-rt-z]* tmp_xzm/fs || exit 1
cp -pr lib/modules/$KERNEL/kernel/* tmp_xzm || exit 1
create_module tmp_xzm drivers.$MODULEFORMAT || exit 1
chmod ago-x drivers.$MODULEFORMAT
rm -Rf tmp_xzm

RAM0SIZE=$(du -bs "$INITRDFOLD" | awk '{print $1}' | sed s/......$//)
RAM0SIZE=$(($RAM0SIZE+$RAMPLUSSIZE))
echo "creating empty image file (${RAM0SIZE}M) for initrd"
dd if=/dev/zero of=$INITRDIMG bs=1M count=${RAM0SIZE} >/dev/null 2>&1
bin/busybox mke2fs -F -m 0 -b 1024 -i 1024 $INITRDIMG >/dev/null 2>&1
tune2fs -c 0 -e continue -i 0 -L initrd -r 1 $INITRDIMG >/dev/null 2>&1

echo "creating empty directory $MOUNTDIR"
rm -Rf $MOUNTDIR
mkdir $MOUNTDIR

echo "mounting $INITRDIMG to $MOUNTDIR"
modprobe loop 2>/dev/null
mount -o loop -t ext2 $INITRDIMG $MOUNTDIR || exit 1
if [ "$?" -ne 0 ]; then
   echo "Error mounting initrd! Not enough free loop devices?"
   exit 1
fi

echo "copying content to $MOUNTDIR"
rmdir $MOUNTDIR/lost+found
cp -R --preserve ./* $MOUNTDIR 2>/dev/null
if [ $? -ne 0 ]; then
   echo "Not enough free space in initrd.!"
   umount $MOUNTDIR
   rm $INITRDIMG
   exit 1
fi
umount $MOUNTDIR

echo "moving $INITRDIMG.gz to $FILENAME"
gzip --best $INITRDIMG
cd "$MYPATH"
mv -f $INITRDIMG.gz $FILENAME
rm -Rf "$MOUNTDIR" "$INITRDFOLD"

exit 0
