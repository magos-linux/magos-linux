#!/bin/sh
#Unmount filesystem from AUFS
#VERSION 3.6
. $(which pfs)
HLP () {
  echo "Usage: $(basename "$0") FYLESYSTEM (squashfs module, dir, iso, img, etc) "
  echo "-n  --no-update  - do not update icon caches, fonts, etc"
  echo "-s  --saveram    - do not remoove module from RAM after unmounting" 
  echo "-h  --help       - this help"
  exit 2
}

for arg in "$@"
do
  case "${arg}" in
    "-n" | "--no-update") fupdate="no";;
    "-s" | "--saveram") saveram="yes";;
    "-h" | "--help") infile=""; break;;
    "-"*[A-Za-z]*) echo "$(basename "$0"): invalid option -- '$(echo ${arg} | tr -d '-')'" >&2; exit 1;;
    *) infile="${arg}";;
  esac
done

[ "${infile}_" = "_" ] && HLP

allow_only_root

if [ -f "${infile}" ] ; then 
	fsname="$(basename $(realpath "${infile}"))" 
	checksfsxzb >/dev/null || exitmsg "Kernel not support PFS!" 3
else
	fsname="$(basename "${infile}")"
fi

#mountpoint="${prefixmp}${fsname}"
mountpoint="`awk '/'${fsname}'/ {print $2}' /proc/mounts`"
if [ -d "${mountpoint}" ]; then
  sync
  mountb -t aufs -o remount,del:"${mountpoint}"/ aufs / #>/dev/null 2>&1
  stataufs=$?
  sync
  if [ "${fupdate}" != "no" -a ${stataufs} -eq 0 ] ; then
	  pfs_update_caches "${mountpoint}" 
	for script in $(find $(dirname $0) -maxdepth 1 -name "runpfsunload*" -user root) ; do 
	  $script "${mountpoint}"  & 
	done
  fi
  
  losetupb |grep -q "${copyramdir}${fsname}"  && ramfree=yes 
  umountb -d "${mountpoint}" #>/dev/null 2>&1
  status=$?
  sync
  rmdir "${mountpoint}" >/dev/null
  [ ${status} -eq 0 ] && status=${stataufs}
  [ ${status} -gt 0 ] && echo "Unmount \"${fsname}\" failed!" >&2
  sync
else
  echo "Object \"${fsname}\" not mounted." >&2
  status=1
fi
if 	[ $ramfree ] ; then
	[ $saveram ] || pfsramfree "${fsname}" 
fi
exit ${status}
