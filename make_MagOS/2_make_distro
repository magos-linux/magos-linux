#!/bin/bash
# License: GPL last version . Лицензия : GPL последней версии
# Written: Mikhail Zaripov . Написано: Михаил Зарипов
# Last modified: ___  . Исправлено _____

date

TMPDIR=/tmp/$(basename $0)
TMPROOTFS=yes
ZRAMFS=no
SIZEROOTFS=14
MYPATH=$(dirname $0)
MYPATH=$(readlink -f $MYPATH)
NOTAERROR="^warning:|^Preparing packages|^Running in chroot, ignoring|^update-alternatives: using|^Created symlink"
ROOTFS="/opt/make_magos_rootfs"
SAVEROOTFS=no
STAGE1METOD=massinstall
RPMOPT="--ignoresize --nodigest --nosignature --nosuggest --nodeps"
RPMOPT="--ignoresize --nodigest --nosignature --nodeps --replacefiles"

function stop()
{
 echo -e $@
 beep 2>/dev/null
 date
 exit 1
}

function mountsys()
{
  NEWROOT=$1
  [ -z "$NEWROOT" ] && NEWROOT="."
  mkdir -p "$NEWROOT"/dev "$NEWROOT"/proc "$NEWROOT"/sys
  mount --bind /proc "$NEWROOT"/proc || stop "Error when mounting /proc"
  mount --bind /sys  "$NEWROOT"/sys  || stop "Error when mounting /sys"
  mount --bind /dev  "$NEWROOT"/dev  || stop "Error when mounting /dev"
}

function umountbranches()
{
  while grep -q "$1" /proc/mounts ;do
    grep "$1" /proc/mounts | awk '{print $2}' | sort -r | while read a ;do
          echo "  umount $a" ; umount "$a" 2>/dev/null
    done
  done
}

function hidebinaries()
{
  for a in $3 ;do
    for b in $2/bin/ $2/usr/bin/ $2/sbin/ $2/usr/sbin/ ;do
      [ -f $b$a ] || continue
      if [ "$1" = "hide" ] ;then
        mv $b$a $b$a.orig
        ln -s /bin/true $b$a
      elif [ -f $b$a.orig ] ;then
        mv -f $b$a.orig $b$a
      fi
    done
  done
}

function installscripts()
{
#LC_ALL=C rpm -ivv --nodeps --test --root "$ROOTFS/orig" installsrc2/* 2>&1 | grep install: | sed s%".*install: "%% | sed s%.i.86$%% | sed s%.noarch$%% | sed s%.x86_64$%%| awk '{print $1}' > order
  mountsys "$ROOTFS/orig"
  hidebinaries hide "$ROOTFS/orig" "$HIDEBININSTALL"
  [ -f "$ROOTFS/orig/sbin/mkinitrd" -o -f "$ROOTFS/orig/usr/sbin/mkinitrd" ] || ln -s /bin/true "$ROOTFS/orig/sbin/mkinitrd"
  mkdir -p "$ROOTFS/orig/tmp/"{store,installsrc}
  cp -pr "$1"/* "$ROOTFS/orig/tmp/installsrc"
  mount --bind $(readlink -f "$TMPDIR/store") "$ROOTFS/orig/tmp/store" || stop "Error when mounting $ROOTFS/orig/tmp/store"
  [ -x /bin/rpm ] && TMPDIR=/tmp LC_ALL=C chroot "$ROOTFS/orig" rpm -iv $RPMOPT /tmp/installsrc/* >"$TMPDIR/tmp/install_log"  2>&1
  [ -x /bin/rpm ] && LC_ALL=C rpm -qa --root "$ROOTFS/orig" --qf '%{NAME}-%{Version}-%{RELEASE}\n' | LC_ALL=C sort > "$ROOTFS/orig/tmp/packageslist.txt"
  hidebinaries unhide "$ROOTFS/orig" "$HIDEBININSTALL"
  lsof 2>/dev/null | grep "$ROOTFS/orig" | awk '{print $2}' | sort -u | xargs kill 2>/dev/null -9
  umount "$ROOTFS/orig"/{tmp/store,sys/fs/fuse/connections,dev,proc,sys} 2>/dev/null
  grep -vf "$ROOTFS/orig/tmp/packageslist.txt" "packageslist.txt" > "notinstalled"
  rm -fr "$ROOTFS/orig/tmp/installsrc"; rmdir "$ROOTFS/orig/tmp/store"
}

function unpackage()
{
  echo -ne "\r  $(basename $1)                                                   \r"
  if [ -x /usr/bin/rpm2cpio ] ;then
    rpm2cpio "$1" | cpio --quiet -i -d 2>> "$2" || stop "\nError when unpacking $1"
  fi
}

function installpackage()
{
  echo -ne "\r  $(basename $1)                                                   \r"
  if [ -x /bin/rpm ] ;then
    LC_ALL=C rpm -i $RPMOPT --noscripts --root "$ROOTFS/orig" "$1" >>"$2"  2>&1 || stop "\nError when installing package $1"
  fi
}


cd "$MYPATH"
[ "`id -u`" != "0" ] && stop "Please run script as root"
[ -f .config ] &&  . .config || stop "Can't find .config"
[ -z "$CACHE" ] && CACHE="cache/$FLASHNAME-$VERREL"

echo -e "\nПодготовка папки"
umountbranches "$TMPDIR"
umountbranches "$ROOTFS"
rm -fr "$ROOTFS" "$TMPDIR" "$CACHE/rootfs" 2>/dev/null
mkdir -p "$TMPDIR"/{tmp,installsrc2,installsrc3} "$ROOTFS" "$CACHE/rootfs"
ln -sf "$(readlink -f $CACHE/store)" "$TMPDIR/store"
cp -prf -t "$TMPDIR" "$CACHE/installsrc" "$CACHE/packageslist.txt" "$CACHE/packagesinfo/"*scripts "files/packages/$FLASHNAME-$VERREL/base"
[ -d "$CACHE/urpmi" ]   && cp -prf -t "$TMPDIR" "$CACHE/urpmi"
[ -d "$CACHE/pubkeys" ] && cp -prf -t "$TMPDIR" "$CACHE/pubkeys"
cat "$TMPDIR/packageslist.txt" | while read a ;do
   grep -q ^$a$ "$TMPDIR/scripts" && mv "$TMPDIR/installsrc/$a" "$TMPDIR/installsrc2"
done
if [ "$TMPROOTFS" = "yes" ] ;then
  mount -t tmpfs -o noatime,size=${SIZEROOTFS}G tmpfs "$ROOTFS" || stop "Out of memory ($SIZETMPFS is needed)"
elif [ "$ZRAMFS" = "yes"  ] ;then
  [ -b /dev/zram4 ] || modprobe zram num_devices=5
  grep -q /dev/zram4 /proc/mounts && exit 1
  echo $(($SIZEROOTFS*1024*1024*1024)) > /sys/block/zram4/disksize
  mkfs.ext2 -m0 -F /dev/zram4
  mount -o noatime /dev/zram4 "$ROOTFS"
elif [ -x /bin/rpm ] ;then
  mkdir -p "$ROOTFS/orig/var/lib/rpm"
  mount -t tmpfs -o noatime tmpfs "$ROOTFS/orig/var/lib/rpm" || stop "Cant mount tmpfs"
fi
mkdir -p "$ROOTFS"/{orig,changes,magos,aufs}

echo -e "\nРаспаковка базовых пакетов"
cd "$ROOTFS/orig"
for a in `cat "$TMPDIR/base"` ;do
  find -L "$TMPDIR/installsrc" "$TMPDIR/installsrc2" -type f | grep /$a- | while read b ;do
    unpackage "$b" "$TMPDIR/install_log1.txt"
  done
done

if [ -d "$TMPDIR/pubkeys" ] ;then
echo -e "\nИмпортирование ключей"
for a in "$TMPDIR/pubkeys/"*.pubkey ;do
   if [ -x /bin/rpm -a -f "$a" ] ;then
      rpm --root "$ROOTFS/orig" --import "$a"  || stop "Error when importing pibkey $a"
   fi
done
fi

echo -e "\nУстановка основных пакетов"
if [ "$STAGE1METOD" = "massinstall" ] ;then
  LC_ALL=C rpm -i $RPMOPT --noscripts --root "$ROOTFS/orig" "$TMPDIR/installsrc/"* >"$TMPDIR/install_log1.txt"  2>&1 || stop "Error when installing packages. See $TMPDIR/install_log1.txt"
else
  find -L "$TMPDIR/installsrc" -type f | sort | while read a ;do
    installpackage "$a" "$TMPDIR/install_log1.txt"
  done
fi
grep -vE "$NOTAERROR" "$TMPDIR/install_log1.txt" | grep -q .  && stop "Ошибки при установке пакетов. Проверьте файл $TMPDIR/install_log1.txt"
makedev "$ROOTFS/orig/dev"
cd "$TMPDIR"

echo -e "\nУстановка пакетов со скриптами"
installscripts "$TMPDIR/installsrc2"
mv "tmp/install_log" "install_log2.txt"
if grep -q . "notinstalled" ;then
  echo -e "Часть пакетов не установлена (возможно из-за неполных зависимостей):"
  cat "notinstalled" | while read a ;do
     echo "  $a"
     mv "$TMPDIR/installsrc2/$a" -t "$TMPDIR/installsrc3"
  done
  echo -e "Повторная установка"
  installscripts "$TMPDIR/installsrc3"
  mv "tmp/install_log" "install_log3.txt"
  grep -q . "notinstalled" && stop "Ошибки при установке пакетов. Проверьте файл $TMPDIR/install_log3.txt"
fi

echo -e "\nОбработка журналов установки"
cat "$TMPDIR/install_log1.txt" "$TMPDIR/install_log2.txt" "$TMPDIR/install_log3.txt" 2>/dev/null | grep -vE "$NOTAERROR"  > "$TMPDIR/tmp/install_log"
grep -E "[.]noarch$|[.]x86_64$|[.]i586$" "$TMPDIR/tmp/install_log" > "$TMPDIR/tmp/install_list"
diff -u1 -aup "$TMPDIR/tmp/install_log" "$TMPDIR/tmp/install_list" | sed  /^@@/d  > "$TMPDIR/install_errors.diff"

echo -e "\nИзменение дистрибутива"
if mount | grep -q "$ROOTFS/orig/var/lib/rpm" ;then
  [ -x "$ROOTFS/usr/lib/rpm/bin/dbconvert" ] && chroot "$ROOTFS" /usr/lib/rpm/bin/dbconvert
  mkdir -p "$TMPDIR/rpmbase"
  mv "$ROOTFS/orig/var/lib/rpm/"* "$TMPDIR/rpmbase"
  umount -n "$ROOTFS/orig/var/lib/rpm"
  mv "$TMPDIR/rpmbase/"* "$ROOTFS/orig/var/lib/rpm"
fi
mount -t aufs -o noatime,br:"$ROOTFS/changes"=rw:"$ROOTFS/orig"=ro aufs "$ROOTFS/aufs" || stop "Can't mount aufs"
cp -p "$MYPATH/files/patches/rootfs/$FLASHNAME/usr/lib/magos/rootfs-patches/$FLASHNAME-clean_distr.sh" "$ROOTFS/aufs/clean_distr.sh" || stop "Can't copy $FLASHNAME-clean_distr.sh to rootfs"
chroot "$ROOTFS/aufs" "/clean_distr.sh" || stop "Errors in /clean_distr.sh"
rm -f "$ROOTFS/aufs/clean_distr.sh"
[ -d urpmi ] && cp -pfR urpmi/* "$ROOTFS/aufs"
if [ -x /bin/rpm ] ;then
  mkdir -p -m 755 "$ROOTFS/aufs/var/lib/rpm/modules"
  cp -p "$MYPATH/$CACHE/modules/packages/"??-* "$ROOTFS/aufs/var/lib/rpm/modules" || stop "Can't copy to $ROOTFS/aufs/var/lib/rpm/modules"
  [ -f "$MYPATH/files/packages/$FLASHNAME-$VERREL/optional" ] && cp -p "$MYPATH/files/packages/$FLASHNAME-$VERREL/optional" "$ROOTFS/aufs/var/lib/rpm/modules"
  [ -d pubkeys ] && cp -prf pubkeys "$ROOTFS/aufs/var/lib/rpm"
fi
for a in $FLASHNAME $FLASHNAME-$VERREL ;do
  [ -d "$MYPATH/files/patches/rootfs/$a" ] && cp -pfR "$MYPATH/files/patches/rootfs/$a/"* "$ROOTFS/magos"
done
cp -pfr "$ROOTFS/magos/"* "$ROOTFS/aufs"
mkdir -p "$ROOTFS/aufs/mnt/live"
echo $VERREL $(date +%Y%m%d) > VERSION
cp VERSION "$ROOTFS/aufs/mnt/live/VERSION"
grep -q ^MKSQFS_OPTS= "$ROOTFS/aufs/usr/lib/magos/os-config" && sed -i "s/^MKSQFS_OPTS=.*/MKSQFS_OPTS=\"$MKSQOPT\"/" "$ROOTFS/aufs/usr/lib/magos/os-config"
mountsys "$ROOTFS/aufs"
chroot "$ROOTFS/aufs" "/usr/lib/magos/rootfs-patches/$FLASHNAME-patch_distr.sh"
[ -f "$ROOTFS/aufs/usr/lib/magos/rootfs-patches/${FLASHNAME}_${VERREL}-patch_distr.sh" ] && chroot "$ROOTFS/aufs" "/usr/lib/magos/rootfs-patches/${FLASHNAME}_${VERREL}-patch_distr.sh"
lsof 2>/dev/null | grep "$ROOTFS/aufs" | awk '{print $2}' | sort -u | xargs kill 2>/dev/null -9
umount "$ROOTFS/aufs/"{dev,proc,sys}
ln -sf /proc/mounts "$ROOTFS/aufs/etc/mtab"
rm -fr "$ROOTFS/aufs/tmp/"* "$ROOTFS/aufs/mnt/"*

echo -e "\nСоздание списков файлов системы"
find "$ROOTFS/magos/"* | sed s%^"$ROOTFS/magos/"%% | sort > magos.content
find "$ROOTFS/aufs/"* | sed s%^"$ROOTFS/aufs/"%% | sort > system.content

echo -e "\nСохранение файлов в кеш"
cp -prf -t "$MYPATH/$CACHE" install_errors.diff VERSION *.content
[ "$SAVEROOTFS" = "yes" ] && cp -prf -t "$MYPATH/$CACHE/rootfs" "$ROOTFS/"{orig,changes,magos}
cd "$MYPATH"
rm -fr "$TMPDIR"

echo -e "\nИтоговая система установлена в $ROOTFS/aufs. Проверьте файл $CACHE/install_errors.diff, как правило там некритичные ошибки"

[ -f .auto ] || stop "\nРабота скрипта завершена."
wall "Запуск следующего скрипта ./3_make_flash через 20 секунд"
sleep 20 && bash ./3_make_flash
