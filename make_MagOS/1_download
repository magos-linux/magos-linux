#!/bin/bash
# License: GPL last version . Лицензия : GPL последней версии
# Written: Mikhail Zaripov . Написано: Михаил Зарипов
# Last modified: ___  . Исправлено _____

date

ONLINE=yes
TMPDIR=/tmp/$(basename $0)-$UID
MYPATH=$(dirname $0)
MYPATH=$(readlink -f $MYPATH)

function stop()
{
 echo -e $@
 beep 2>/dev/null
 date
 exit 1
}

function loadmediafiles()
{
  echo "  $1 -- $2"
  wget -r -np -d --spider -R "*.rpm","*.deb" $2/  -P "$TMPDIR/tmp" >"$TMPDIR/media/$1".tmp 2>&1
  cat "$TMPDIR/media/$1".tmp | sed s%http://%\\nhttp://%g | sed s%[.][Rr][Pp][Mm]%.rpm\\n%g | sed s%[.][Dd]Ee[][Bb]%.deb\\n%g | grep -i $2/.*[rd][pe][mb]$ | grep -v " " | sed 's|%2[Bb]|+|g' | sort -uV > "$TMPDIR/urls/$1"
  cat "$TMPDIR/urls/$1" | sed 's|^.*/||g' | sort -uV > "$TMPDIR/media/$1"
  rm -f "$TMPDIR/media/$1".tmp
}

function loadmediainfo()
{
  if [ "$3" != "skip" ] ;then
    mkdir -p "$TMPDIR/urpmi/"{etc/urpmi,var/lib/urpmi/$1} "$TMPDIR/pubkeys"
    curl -s --retry-delay 2 --retry 5 -o "$TMPDIR"/pubkeys/$a.pubkey "$2/media_info/pubkey"
    [ -f "$2/media_info/pubkey" ] && dos2unix "$2/media_info/pubkey" && echo "" >> "$2/media_info/pubkey"
    grep -qi "<html" "$TMPDIR"/pubkeys/$a.pubkey && rm -f "$TMPDIR"/pubkeys/$a.pubkey
    curl -s --retry-delay 2 --retry 5 -o "$TMPDIR"/urpmi/var/lib/urpmi/$1/MD5SUM "$2/media_info/MD5SUM" || stop "Can't download $2/media_info/MD5SUM"
    curl -s --retry-delay 2 --retry 5 -o "$TMPDIR"/urpmi/var/lib/urpmi/$1/synthesis.hdlist.cz "$2/media_info/synthesis.hdlist.cz" || stop "Can't download $2/media_info/synthesis.hdlist.cz"
    [ -f "$TMPDIR/urpmi/etc/urpmi/urpmi.cfg" ] || echo -e "{\n}\n" > "$TMPDIR/urpmi/etc/urpmi/urpmi.cfg"
    echo "$1 $2 {" >> "$TMPDIR/urpmi/etc/urpmi/urpmi.cfg"
    [ -z "$3" ] || echo "  $3" >> "$TMPDIR/urpmi/etc/urpmi/urpmi.cfg"
    [ -z "$4" ] || echo "  $4" >> "$TMPDIR/urpmi/etc/urpmi/urpmi.cfg"
    echo -e "}\n"  >> "$TMPDIR/urpmi/etc/urpmi/urpmi.cfg"
  fi
}

function makefilelists()
{
  ORDER=default
  [ "$2" = "skip" ] && ORDER=skiped
  [ "$2" = "ignore" -o  "$3" = "ignore" ] && ORDER=ignored
  cat "$TMPDIR/media/$1" >> "$TMPDIR/re/media/$ORDER"
  cat "$TMPDIR/urls/$1" >> "$TMPDIR/re/urls/$ORDER"
}

function findpackage()
{
  PAC=$(grep "^$1$RE4NAME" "$TMPDIR/re/media/$3" 2>/dev/null| tail -1)
  [ -z "$PAC" ] && return 1
  echo $PAC >> "$TMPDIR"/modules/packages/$2
  grep -m1 "/$PAC$" "$TMPDIR/re/urls/$3" >> "$TMPDIR/re/urls/$FLASHNAME-$VERREL.txt" || stop "Can't find $PAC in media $3"
  [ -f "$TMPDIR/store/$PAC" ] && ln -sf ../store/$PAC "$TMPDIR/installsrc"
  [ -f "$TMPDIR/store/$PAC" ] || grep -m1 "/$PAC$" "$TMPDIR/re/urls/$3" >> "$TMPDIR/downloadlist.txt"
}

function findpackage2()
{
  PAC=$(grep "^$1$RE4NEXC" "$TMPDIR/re/media/$3" 2>/dev/null| tail -1)
  [ -z "$PAC" ] && return 1
  echo $PAC >> "$TMPDIR"/modules/packages/$2
  grep -m1 "/$PAC$" "$TMPDIR/re/urls/$3" >> "$TMPDIR/re/urls/$FLASHNAME-$VERREL.txt" || stop "Can't find $PAC in media $3"
  [ -f "$TMPDIR/store/$PAC" ] && ln -sf ../store/$PAC "$TMPDIR/installsrc"
  [ -f "$TMPDIR/store/$PAC" ] || grep -m1 "/$PAC$" "$TMPDIR/re/urls/$3" >> "$TMPDIR/downloadlist.txt"
}

cd "$MYPATH"
[ -f .config ] &&  . .config || stop "Can't find .config"
[ -z "$CACHE" ] && CACHE="cache/$FLASHNAME-$VERREL"
[ -z "$RE4NEXC" ] && RE4NEXC="$RE4NAME"

echo -e "\nПодготовка папки"
rm -fr "$TMPDIR"
mkdir -p "$TMPDIR"/{modules/packages,modules/files,urls,media,re/media,re/urls,installsrc,tmp/download,packagesinfo} $CACHE/{store,packagesinfo/files}
ln -sf "$PWD/$CACHE/store" "$TMPDIR"/store

if [ "$ONLINE" == "yes" ] ;then
  echo -e "\nЗагрузка списков хранилищ пакетов"
  for a in `gawk '{print $2}' files/media/media-$VERREL` ;do
    loadmediafiles $a $(grep -m1 -E " $a | $a$" files/media/media-$VERREL | gawk '{print $1}')
  done
  if [ -x /usr/sbin/urpmi ] ;then
     echo -e "\nСоздание источников для urpmi"
     for a in `gawk '{print $2}' files/media/media-$VERREL` ;do
       loadmediainfo $a $(grep -m1 -E " $a | $a$" files/media/media-$VERREL | gawk '{print $1 " " $3 " " $4}')
     done
  fi
else
  cp -prf -t "$TMPDIR"  $CACHE/media $CACHE/pubkeys $CACHE/urls
  [ -x /usr/sbin/urpmi ] && cp -prf $CACHE/urpmi "$TMPDIR"
fi

echo -e "\nСоздание списков пакетов"
cp -prf -t "$TMPDIR"/re "$TMPDIR/media" "$TMPDIR/urls"
cp -prf files/packages/$FLASHNAME-$VERREL "$TMPDIR/re/packages"
for a in `gawk '{print $2}' files/media/media-$VERREL` ;do
  makefilelists $a $(grep -m1 -E " $a | $a$" files/media/media-$VERREL | gawk '{print $3 " " $4}')
done
ls -1 $CACHE/store | grep [.]rpm$ > $TMPDIR/re/storelist.txt

echo -e "\nОбработка списков пакетов"
find "$TMPDIR"/re/packages -maxdepth 1 -type f | grep /[0-9][0-9]-* | sort | while read a ;do
  MODULE=$(basename $a) ; echo "  $MODULE"
  cat $a | while read n ;do
    MEDIA=$(grep -l ^$n$ "$TMPDIR/"re/packages/media_preferred/* | tail -1 | sed s%^.*/%%)
    if [ ! -z "$MEDIA" ] ;then
       findpackage2 "$n" "$MODULE" "$MEDIA" || findpackage "$n" "$MODULE" "$MEDIA"  || echo $n >> "$TMPDIR/not_founded.txt"
    else
       findpackage "$n" "$MODULE" "default" || findpackage "$n" "$MODULE" "ignored" || findpackage "$n" "$MODULE" "skiped" || echo $n >> "$TMPDIR/not_founded.txt"
    fi
  done
done
if [ -f "$TMPDIR/not_founded.txt" ] ;then 
   echo -e "\nОшибка: Не все пакеты были найдены в источниках:"
   cat "$TMPDIR/not_founded.txt"
   stop "Работа скрипта прекращена"
fi

if [ -f "$TMPDIR/downloadlist.txt" -a "$ONLINE" == "yes" ]  ;then
   echo -e "\nЗакачка файлов"
   cat "$TMPDIR/downloadlist.txt" | while read a ;do
     wget -P "$TMPDIR/tmp/download" $a || continue
     PAC=$(basename $a)
     mv -f "$TMPDIR/tmp/download/$PAC" "$TMPDIR/store"
     ln -sf ../store/$PAC "$TMPDIR/installsrc"
     sed -i /\\/$PAC$/d "$TMPDIR/downloadlist.txt"
   done
   grep -q . "$TMPDIR/downloadlist.txt" 2>/dev/null && echo -e "\nОшибка: Часть пакетов не загружена из-за ошибок."
fi
grep -q . "$TMPDIR/downloadlist.txt" 2>/dev/null && stop "\nСсылки сохранены в $TMPDIR/downloadlist.txt\nРабота скрипта прекращена"

echo -e "\nОбновление базы данных пакетов"
cat  "$TMPDIR/modules/packages/"??-* | LC_ALL=C sort > "$TMPDIR/packageslist.txt"
touch "$TMPDIR/packagesinfo/scripts" "$TMPDIR/packagesinfo/noscripts"
cp -pf "$CACHE/packagesinfo/"*scripts "$TMPDIR/packagesinfo" 2>/dev/null
cat  "$TMPDIR/packagesinfo/"*scripts | LC_ALL=C sort > "$TMPDIR/tmp/scripts_processed"
diff "$TMPDIR/tmp/scripts_processed" "$TMPDIR/packageslist.txt" | grep '> ' | sed s/^..// > "$TMPDIR/tmp/scripts_unprocessed"
ls -1 "$CACHE/packagesinfo/files/"*  2>/dev/null | sed 's|.*/||' | LC_ALL=C sort > "$TMPDIR/tmp/files_processed"
diff "$TMPDIR/tmp/files_processed" "$TMPDIR/packageslist.txt" | grep '> ' | sed s/^..// > "$TMPDIR/tmp/files_unprocessed"
if [ -x /bin/rpm ] ;then
  cat "$TMPDIR/tmp/scripts_unprocessed"| while read a ;do
    DEST=scripts
    echo $a | grep -qf "$TMPDIR/re/packages/noscripts" && DEST=noscripts
    rpm -qp --scripts "$TMPDIR/installsrc/$a" | grep -q . || DEST=noscripts
    echo $a >> "$TMPDIR/packagesinfo/$DEST"
  done
  cat "$TMPDIR/tmp/files_unprocessed" | while read a ;do
    rpm -qlp "$TMPDIR/installsrc/$a" | grep -vi "^(" | sed s-^/-- > "$CACHE/packagesinfo/files/$a"
  done
fi
for a in "$TMPDIR/modules/packages/"* ;do
  echo -ne > "$TMPDIR/tmp/files"
  cat $a | while read p ;do
    cat "$CACHE/packagesinfo/files/$p" >> "$TMPDIR/tmp/files"
  done
  sort "$TMPDIR/tmp/files" > "$TMPDIR/modules/files/$(basename $a)"
done

echo -e "\nПроверка зависимостей"
[ -x /bin/rpm ] && LC_ALL=C rpm -i --test --root "$TMPDIR/tmp" "$TMPDIR/installsrc/"* 2>&1 | grep -ivE "^warning|warning:|installing package|error:" | sort > "$TMPDIR/checkdeps.txt"

cat $TMPDIR/checkdeps.txt
echo -e "\nВ случае наличия ошибок нужно добавить или убрать пакеты в files/packages/* и перезапустить сборку с начала"

echo -e "\nОбновление кеша"
if [ "$ONLINE" == "yes" ] ;then
   rm -fr $CACHE/{media,urpmi,urls}
   cp -pfr -t "$CACHE"  "$TMPDIR/media" "$TMPDIR/pubkeys" "$TMPDIR/urpmi" "$TMPDIR/urls"
fi
rm -fr $CACHE/{modules,installsrc} $CACHE/*.txt  $CACHE/packagesinfo/*scripts
cp -prf -t "$CACHE" "$TMPDIR/modules" "$TMPDIR/packagesinfo" "$TMPDIR/installsrc" "$TMPDIR"/*.txt
rm -fr "$TMPDIR"
for a in "$CACHE/pubkeys/"* ;do dos2unix $a 2>/dev/null ; tail -1 "$a" | grep -q ^$ || echo >> "$a" ;done

[ -f .auto ] || stop "\nРабота скрипта завершена."
wall "Запуск следующего скрипта ./2_make_distro через 20 секунд"
sleep 20 && bash ./2_make_distro
