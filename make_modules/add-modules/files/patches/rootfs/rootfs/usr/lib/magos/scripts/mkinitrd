#!/bin/bash
# License: GPL last version . Лицензия : GPL последней версии
# Written: Mikhail Zaripov . Написано: Михаил Зарипов
# Last modified: ___  . Исправлено _____

. liblinuxlive || exit 1

# libraries to be placed in initrd/lib (links)
INIRAMDLIBS1="ld-linux.so.2 libblkid.so.1 libc.so.6 libdl.so.2 libgcc_s.so libpthread.so.0
  librt.so.1 libuuid.so.1 libz.so.1 libm.so.6 liblzma.so.?"

# libraries to be placed in initrd/usr/lib (links)
INIRAMDLIBS2="libelf.so.1 libglib-2.0.so.0 liblzo2.so.2 libm.so.6 libpcre.so.0 libpopt.so.0 libsysfs.so.2 libpci.so.3
  libresolv.so.2 libnss_files.so.2 libnss_dns.so.2 libattr.so.1 libacl.so.1
  libaal-1.0.so.5 libcom_err.so.2 libe2p.so.2 libext2fs.so.2 libreadline.so.6 libreiser4-1.0.so.7 librepair-1.0.so.7 libntfs.so.10
  libstdc++.so.6 libntfs-3g.so.8? libply-splash-core.so.2 libply.so.2 libgthread-2.0.so.0 libutil.so.1"

# binaries for /bin
INIRAMDBIN1="busybox.static lspci httpfs blkid blockdev"
# binaries for /usr/bin
INIRAMDBIN2='dosfsck fsck fsck.ext2 fsck.reiser4 reiserfsck rsync losetup ntfsfix mksquashfs unsquashfs
  ntfs-3g.probe ntfs-3g fusermount  mount.fuse ulockmgr_server resume sshfs'

INITRDMODULES='kernel/fs/aufs /kernel/fs/squashfs kernel/fs/fuse/fuse.
  kernel/fs/isofs kernel/fs/fat kernel/fs/ntfs kernel/fs/ext3 kernel/fs/ext4
  kernel/fs/jbd kernel/fs/jbd2 kernel/fs/reiserfs kernel/fs/xfs
  kernel/fs/nfs/ kernel/fs/nfs_common kernel/fs/lockd kernel/fs/fscache
  kernel/fs/nls/nls_cp866. kernel/fs/nls/nls_utf8.
  kernel/lib/crc-t10dif. kernel/lib/crc16.
  kernel/drivers/block/loop. kernel/drivers/block/cryptoloop.
  kernel/drivers/scsi/scsi_mod. kernel/drivers/scsi/sd_mod. kernel/drivers/scsi/sr_mod.
  kernel/drivers/ata kernel/drivers/scsi/vmw_pvscsi.
  kernel/drivers/usb/core/usbcore. kernel/drivers/usb/usb-common. kernel/drivers/usb/storage
  kernel/drivers/usb/host/ehci-hcd. kernel/drivers/usb/host/ohci-hcd. kernel/drivers/usb/host/uhci-hcd.
  kernel/drivers/hid/hid. kernel/drivers/hid/usbhid/usbhid.
  kernel/drivers/pcmcia/pcmcia_core. kernel/drivers/pcmcia/pcmcia. kernel/drivers/pcmcia/yenta_socket.
  kernel/net/sunrpc/sunrpc. kernel/net/sunrpc/auth_gss/auth_rpcgss. kernel/net/packet/af_packet.
  kernel/crypto/cbc. kernel/crypto/aes_generic. kernel/arch/x86/crypto/aes-i586. '
INITRDMODULESOPT='kernel/drivers/ide dkms-binary/fs/squashfs dkms-binary/lib/lzma kernel/fs/unionfs/unionfs.
  kernel/lib/zlib_inflate kernel/lib/zlib_deflate kernel/drivers/pcmcia/rsrc_nonstatic.'

MYPATH="$(pwd)"
INITRDFOLD=/tmp/mkinitrd-$$
INITRDIMG=/tmp/initrd.img-$$
MOUNTDIR=/tmp/mkinitrd_mountdir_$$
RAM0SIZE=13000

# Copy librarries
# $1 - filename
# $2 - destination dir
function copy_lib()
{
 [ -h $2/$1 ] && rm -f $2/`readlink $1 | awk -F/ '{ print $(NF)}'` $2/$1
 LIBPATH=
 [ -h /usr/lib/$1 ] && LIBPATH=/usr/lib/$(basename /usr/lib/$1)
 [ -h /lib/$1 ] && LIBPATH=/lib/$(basename /lib/$1)
 if [ "$LIBPATH" = "" ] ;then echo "$1 - symlink not found" ; return ;fi
 LIBNAME=$(basename $LIBPATH)
 REALLIB=$(basename $(readlink $LIBPATH))
 [ -f "/usr/lib/$REALLIB" ] && cp -p "/usr/lib/$REALLIB" $2
 [ -f "/lib/$REALLIB" ] && cp -p "/lib/$REALLIB" $2
 if ! [ -f $2/$REALLIB ] ;then echo "$1 - file $REALLIB not found" ; return ;fi
 ln -sf $REALLIB $2/$LIBNAME
}
# Copy binaries
# $1 - filename
# $2 - destination dir
function copy_bin()
{
 for a in /usr/lib/magos/scripts /sbin /usr/sbin /bin /usr/bin ;do
    [ -x "$a/$1" ] || continue
    cp -L $a/$1 $2 && break
 done
 if [ ! -x "$2/$1" ] ;then
    echo $1 not found !
    exit 1
 fi
}

#Copy kernel module
# $1 - path
# $2 - kernel name
function copy_mod()
{
  mkdir -p $(dirname lib/modules/$2/$1)
  cp -pHR /lib/modules/$2/$1* $(dirname lib/modules/$2/$1)
}

function usage()
{
 echo -e "usage $0 <initrd-image> <kernel-version> \n example: $0 /boot/initrd-$(uname -r).img $(uname -r)"
 exit 1
}

[ "$1" = "" -o  "$1" = "--version" -o "$1" = "--help" -o "$1" = "--help"  ] && usage

#cmdline processing
while [ "$1" != ""  ] ;do 
    if [ "$1" = "--preload" ];then
       shift ;shift ;continue
    fi
    if [ "$(echo $1 | cut -c 1-2 )" = "--" ] ;then
       shift ;continue
    fi
    FILENAME=$1
    KERNEL=$2
    shift; shift
done

[ -z "$KERNEL" ] && KERNEL=$(ls -1 /lib/modules | tr -d / | tail -1)
[ -z "$FILENAME" -o -z "$KERNEL" ] && usage
echo "Creating $FILENAME for kernel $KERNEL"

echo "Creating filesystem in $INITRDFOLD"
rm -fr "$INITRDFOLD" || exit 1
mkdir "$INITRDFOLD" || exit 1
cd "$INITRDFOLD"
cp -R --preserve /usr/share/magos/initrd/* ./ || exit 1
mkdir -p etc dev bin mnt proc lib sys tmp var/log etc/default usr/lib usr/bin usr/share/locale/ru_RU.UTF-8 lib/modules/$KERNEL/kernel/fs
if [ -f /etc/magos-release ] ;then 
   cp -p /etc/magos-release ./VERSION || exit 1
else
   cp -p /mnt/live/VERSION ./VERSION || exit 1
fi
cp -p /usr/lib/magos/scripts/liblinuxlive ./ || exit 1
ln -sf bin sbin
touch etc/{m,fs}tab

echo "creating devices"
mknod dev/console c 5 1 
mknod dev/fb0 c 29 0
mknod dev/null c 1 3
mknod dev/zero c 1 5
mknod dev/ram b 1 1
mknod dev/systty c 4 0
mknod dev/tty c 5 0
mknod dev/fuse c 10 229
for i in 1 2 3 4 5 6; do
  mknod dev/tty$i c 4 $i;
done

echo "copying libraries"
for a in $INIRAMDLIBS1 ;do
  copy_lib $a lib || exit 1
done
for a in $INIRAMDLIBS2 ;do
  copy_lib $a usr/lib || exit 1
done
echo "copying binaries"
for a in $INIRAMDBIN1 ;do
  copy_bin $a bin || exit 1
done
for a in $INIRAMDBIN2 ;do
  copy_bin $a usr/bin || exit 1
done

mv bin/busybox.static bin/busybox || exit 1
mv usr/bin/losetup usr/bin/losetup.real || exit 1

# build links to busybox's functions from busybox's own help text
for i in $(bin/busybox --help | grep -v Copyright | grep , | tr , " "); do
   ln -s busybox bin/$i 2>/dev/null
done

cp -f /usr/lib/libbdevid.so.* usr/lib   || exit 1
cp -f /usr/lib/libnash.so.*   usr/lib   || exit 1
cp -f /lib/libfuse.*   usr/lib          || exit 1
cp -f /lib/libulockmgr.*   usr/lib      || exit 1
cp -f /usr/share/pci.ids      usr/share || exit 1
cp -pHR /usr/share/locale/ru_RU.UTF-8/* usr/share/locale/ru_RU.UTF-8 || exit 1

ln -sf ../usr/bin/mksquashfs   bin/mksquashfs || exit 1
ln -sf ../usr/bin/unsquashfs   bin/unsquashfs || exit 1
ln -sf ../usr/bin/ntfs-3g      bin/ntfsmount  || exit 1
ln -sf libz.so.1  lib/libz.so           || exit 1
ln -sf dosfsck    usr/bin/fsck.msdos    || exit 1
ln -sf dosfsck    usr/bin/fsck.vfat     || exit 1
ln -sf fsck.ext2  usr/bin/fsck.ext3     || exit 1
ln -sf fsck.ext2  usr/bin/fsck.ext4     || exit 1
ln -sf fsck.ext2  usr/bin/fsck.ext4dev  || exit 1
ln -sf reiserfsck usr/bin/fsck.reiserfs || exit 1
ln -sf ntfs-3g    usr/bin/ntfsmount     || exit 1
ln -sf /bin/ntfs-3g usr/bin/mount.ntfs-3g || exit 1

echo "copying modules"
for mod in $INITRDMODULES; do
  copy_mod $mod $KERNEL
done
for mod in $INITRDMODULESOPT; do
  copy_mod $mod $KERNEL 2>/dev/null
done

echo "copying network modules"
for mod in $(list_network_drivers); do
   cat /lib/modules/$KERNEL/modules.dep | grep -F /$mod.ko | while read LINE; do
      for dep in $(echo $LINE | tr -d ":" ); do
         copy_mod $dep $KERNEL || exit 1
      done
   done
done

echo "unpacking all kernel modules for initrd"
find lib -noleaf -name "*.ko.gz" | xargs -r gunzip || exit 1

echo "generating module dependency files"
depmod -b ./ $KERNEL || exit 1

echo "compressing usr in initrd"
create_module usr usr.$MODULEFORMAT || exit 1
chmod ago-x usr.$MODULEFORMAT || exit 1
rm -Rf usr/*

echo "compressing net in initrd"
mkdir -p tmp_lzm/fs tmp_lzm/drivers
mv lib/modules/$KERNEL/kernel/drivers/[ac-z]* tmp_lzm/drivers || exit 1
mv lib/modules/$KERNEL/kernel/net tmp_lzm || exit 1
mv lib/modules/$KERNEL/kernel/fs/[b-rt-z]* tmp_lzm/fs || exit 1
cp -pr lib/modules/$KERNEL/kernel/* tmp_lzm || exit 1
create_module tmp_lzm drivers.$MODULEFORMAT || exit 1
chmod ago-x drivers.$MODULEFORMAT
rm -Rf tmp_lzm

echo "creating empty image file for initrd"
dd if=/dev/zero of=$INITRDIMG bs=1024 count=$RAM0SIZE >/dev/null 2>&1
mkfs -t ext2 -F -m 0 -b 1024 -i 1024 $INITRDIMG >/dev/null 2>&1
tune2fs -i 120m $INITRDIMG >/dev/null 2>&1

echo "creating empty directory $MOUNTDIR"
rm -Rf $MOUNTDIR
mkdir $MOUNTDIR

echo "mounting $INITRDIMG to $MOUNTDIR"
modprobe loop 2>/dev/null
mount -o loop -t ext2 $INITRDIMG $MOUNTDIR || exit 1
if [ "$?" -ne 0 ]; then
   echo "Error mounting initrd! Not enough free loop devices?"
   exit 1
fi

echo "copying content to $MOUNTDIR"
rmdir $MOUNTDIR/lost+found
cp -R --preserve ./* $MOUNTDIR 2>/dev/null
if [ $? -ne 0 ]; then
   echo "Not enough free space in initrd.!"
   umount $MOUNTDIR
   rm $INITRDIMG
   exit 1
fi
umount $MOUNTDIR

echo "moving $INITRDIMG.gz to $FILENAME"
gzip --best $INITRDIMG
mv -f $INITRDIMG.gz $FILENAME
cd "$MYPATH"
rm -Rf "$MOUNTDIR" "$INITRDFOLD"

exit 0
